package com.gatebuzz.rapidapi.rx.generator;

import com.gatebuzz.rapidapi.rx.generator.model.Argument;
import com.gatebuzz.rapidapi.rx.generator.model.Block;
import com.gatebuzz.rapidapi.rx.generator.model.ServiceDefinition;
import com.google.gson.Gson;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

/**
 * <p>Code generator for RxRapidApi</p>
 * <p>
 * <p>Pass a command-line argument of the URL of a RapidApi "metadata.json" file
 * and the tool will output the corresponding interface definition.</p>
 */
public class RxRapidApiCodeGenerator {
    private static final String[] words = {
            "abstract", "assert", "boolean", "break", "byte", "case",
            "catch", "char", "class", "const", "continue", "default",
            "do", "double", "else", "enum", "extends", "false", "final",
            "finally", "float", "for", "goto", "if", "implements",
            "import", "instanceof", "int", "interface", "long", "native",
            "new", "null", "package", "private", "protected", "public",
            "return", "short", "static", "strictfp", "super", "switch",
            "synchronized", "this", "throw", "throws", "transient",
            "true", "try", "void", "volatile", "while"};
    private static final Set<String> reservedNames = new HashSet<String>() {{
        addAll(Arrays.asList(words));
    }};

    public static void main(String[] args) throws Exception {
        if (args.length != 1) {
            System.out.println("You need to pass the URL for a metadata.json file to process.");
            return;
        }
        new RxRapidApiCodeGenerator(args[0]).generate();
    }

    private final String metaDataUrl;
    private final OkHttpClient client;
    private final Gson gson;

    private RxRapidApiCodeGenerator(String metaDataUrl) {
        this.metaDataUrl = metaDataUrl;
        this.client = new OkHttpClient();
        this.gson = new Gson();
    }

    private void generate() throws Exception {
        Response response = client.newCall(new Request.Builder().url(metaDataUrl).build()).execute();
        if (response.code() == 200) {
            System.out.println("Metadata downloaded.");
            ServiceDefinition def = gson.fromJson(response.body().charStream(), ServiceDefinition.class);

            String fileName = def.getPackageName() + ".java";
            FileWriter fw = new FileWriter(fileName);
            PrintWriter pw = new PrintWriter(fw);

            StringBuilder sb = new StringBuilder();
            appendImports(sb);
            sb.append("\n");
            appendClassComment(def, sb);
            Set<String> defaults = appendAnnotations(def, sb);

            sb.append("public interface ").append(def.getPackageName()).append(" {\n\n");
            appendMethods(def, sb, defaults);
            sb.append("}\n");

            pw.print(sb.toString());
            pw.flush();
            pw.close();

            System.out.println(fileName + " created.");
        } else {
            System.out.println("Failed to load metdata.");
        }
    }

    private void appendImports(StringBuilder sb) {
        sb.append("import com.gatebuzz.rapidapi.rx.ApiPackage;\n");
        sb.append("import com.gatebuzz.rapidapi.rx.DefaultParameters;\n");
        sb.append("import com.gatebuzz.rapidapi.rx.Named;\n");
        sb.append("import com.gatebuzz.rapidapi.rx.Required;\n");
        sb.append("import rx.Observable;\n");
        sb.append("import java.io.*;\n");
        sb.append("import java.util.*;\n");
    }

    private void appendClassComment(ServiceDefinition def, StringBuilder sb) {
        sb.append("/**\n");
        sb.append(" * <p>").append(def.getPackageName());
        if (def.getTagline() != null && !def.getTagline().isEmpty()) {
            sb.append(" - ").append(def.getTagline());
        }
        sb.append("</p>\n");
        if (def.getDescription() != null && !def.getDescription().isEmpty()) {
            sb.append(" * <p>").append(def.getDescription()).append("</p>\n");
        }
        sb.append(" *\n");
        sb.append(" * <p>Generated by ").append(RxRapidApiCodeGenerator.class.getName()).append("</p>\n");
        sb.append(" * <p>Generated on ").append(new Date().toString()).append("</p>\n");
        sb.append(" *\n");
        sb.append(" * For more details, see <a href=\"").append(def.getRepo()).append("\">the github repo</a>\n");
        sb.append(" */\n");
    }

    private Set<String> appendAnnotations(ServiceDefinition def, StringBuilder sb) {
        sb.append("@SuppressWarnings(\"unused\")\n");
        sb.append("@ApiPackage(\"").append(def.getPackageName()).append("\")\n");
        Set<String> defaults = new HashSet<>();
        if (!def.getAccounts().getCredentials().isEmpty()) {
            StringBuilder c = new StringBuilder();
            for (String cred : def.getAccounts().getCredentials()) {
                if (c.length() > 0) {
                    c.append(", ");
                }
                c.append("\"").append(cred).append("\"");
                defaults.add(cred);
            }
            sb.append("@DefaultParameters(").append(c.toString()).append(")\n");
        }
        return defaults;
    }

    private void appendMethods(ServiceDefinition def, StringBuilder sb, Set<String> defaults) {
        if (!def.getBlocks().isEmpty()) {
            StringBuilder b = new StringBuilder();
            for (Block block : def.getBlocks()) {
                if (b.length() > 0) {
                    b.append("\n");
                }
                StringBuilder a = new StringBuilder();
                StringBuilder c = new StringBuilder();
                for (Argument arg : block.getArguments()) {
                    if (!defaults.contains(arg.getName())) {
                        if (a.length() > 0) {
                            a.append(",\n");
                        }
                        a.append("        ");
                        if (Boolean.TRUE.equals(arg.getRequired())) {
                            a.append("@Required ");
                        }
                        String sanitizedName = getSanitizedName(arg);
                        a.append("@Named(\"").append(sanitizedName).append("\") ");
                        a.append(getSanitizedType(arg)).append(" ").append(sanitizedName);
                        if (arg.getInfo() != null && !arg.getInfo().isEmpty()) {
                            c.append("     * @param ").append(sanitizedName).append(" ").append(arg.getInfo()).append("\n");
                        }
                    }
                }
                b.append("    /**\n");
                if (block.getDescription() != null && !block.getDescription().isEmpty()) {
                    b.append("     * ").append(block.getDescription()).append("\n");
                    b.append("     *\n");
                }
                b.append(c.toString());
                b.append("     */ \n");
                b.append("    Observable<Map<String, Object>> ").append(block.getName());
                if (a.length() == 0) {
                    b.append("();\n");
                } else {
                    b.append("(\n").append(a.toString()).append("\n    );\n");
                }
            }
            sb.append(b.toString());
        }
    }

    private static String getSanitizedName(Argument arg) {
        String name = arg.getName();
        if (reservedNames.contains(name)) {
            return "_" + name;
        }
        return name;
    }

    private static String getSanitizedType(Argument arg) {
        String type = arg.getType();
        if ("Array".equalsIgnoreCase(type) || "JSON".equalsIgnoreCase(type)) {
            return "String";
        }
        return type;
    }
}
