package com.gatebuzz.rapidapi.rx.generator;

import com.gatebuzz.rapidapi.rx.ApiPackage;
import com.gatebuzz.rapidapi.rx.DefaultParameters;
import com.gatebuzz.rapidapi.rx.Named;
import com.gatebuzz.rapidapi.rx.Required;
import rx.Observable;
import java.io.*;
import java.util.*;

/**
 * <p>Github - Github Package</p>
 * <p>An object oriented wrapper for the GitHub v3 API.</p>
 *
 * <p>Generated by com.gatebuzz.rapidapi.rx.generator.RxRapidApiCodeGenerator</p>
 * <p>Generated on Mon Feb 20 11:52:49 CST 2017</p>
 *
 * For more details, see <a href="https://github.com/RapidSoftwareSolutions/Marketplace-Github-Package">the github repo</a>
 */
@SuppressWarnings("unused")
@ApiPackage("Github")
@DefaultParameters("accessToken")
public interface Github {

    /**
     * Check to see if the current user is subscribed to a thread.
     *
     * @param id The thread ID
     */ 
    Observable<Map<String, Object>> checkNotificationThreadSubscription(
        @Required @Named("id") String id
    );

    /**
     * Check if you are starring a repository
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> checkRepositoryStarring(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Delete a notification thread subscription.
     *
     * @param id The thread ID
     */ 
    Observable<Map<String, Object>> deleteNotificationThreadSubscription(
        @Required @Named("id") String id
    );

    /**
     * List public events
     *
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getPublicEvents(
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List public events for an organization
     *
     * @param organizationName The name of organization
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getOrganizationEvents(
        @Required @Named("organizationName") String organizationName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List repository events
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryEvents(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List issue events for a repository
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryIssuesEvents(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List public events for a network of repositories
     *
     * @param user The owner name
     * @param repositoryName The repository name
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryNetworkEvents(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List events performed by a user
     *
     * @param user The user name
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getUserPerformedEvents(
        @Required @Named("user") String user,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List events for a user's organization
     *
     * @param user The user name
     * @param organizationName The name of the organization
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getUserOrganizationEvents(
        @Required @Named("user") String user,
        @Required @Named("organizationName") String organizationName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List public events performed by a user
     *
     * @param user The user name
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getUserPublicPerformedEvents(
        @Required @Named("user") String user,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List events that a user has received
     *
     * @param user The user name
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getUserReceivedEvents(
        @Required @Named("user") String user,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List public events that a user has received
     *
     * @param user The user name
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getUserReceivedPublicEvents(
        @Required @Named("user") String user,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get all feeds available for the authenticated user.
     *
     */ 
    Observable<Map<String, Object>> getFeeds();

    /**
     * View a single notification thread.
     *
     * @param id The ID of the thread
     */ 
    Observable<Map<String, Object>> getNotificationThread(
        @Required @Named("id") String id
    );

    /**
     * Get all notifications for the current user, grouped by repository.
     *
     * @param all If true, show notifications marked as read. Default: false
     * @param participating If true, only shows notifications in which the user is directly participating or mentioned. Default: false
     * @param since Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
     * @param before Only show notifications updated before the given time. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
     */ 
    Observable<Map<String, Object>> getUserNotifications(
        @Named("all") String all,
        @Named("participating") String participating,
        @Named("since") String since,
        @Named("before") String before
    );

    /**
     * Get all notifications for the given user.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param all If true, show notifications marked as read. Default: false
     * @param participating If true, only shows notifications in which the user is directly participating or mentioned. Default: false
     * @param since Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
     * @param before Only show notifications updated before the given time. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
     */ 
    Observable<Map<String, Object>> getUserRepositoryNotifications(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("all") String all,
        @Named("participating") String participating,
        @Named("since") String since,
        @Named("before") String before
    );

    /**
     * Get a Repository Subscription.
     *
     * @param user The onwer name
     * @param repositoryName The name of the repository
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositorySubscription(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List Stargazers
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryStargazers(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List repositories being starred by the authenticated user
     *
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getStarredRepositories(
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List repositories being starred by a user
     *
     * @param user The user name
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getUserStarredRepositories(
        @Required @Named("user") String user,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List repositories being watched by the authenticated user.
     *
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getWatchedRepositories(
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List repositories being watched by a user.
     *
     * @param user The user name
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getUserWatchedRepositories(
        @Required @Named("user") String user,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get watchers for repository.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryWatchers(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Mark a notification thread as read.
     *
     * @param id The Id of the thread
     */ 
    Observable<Map<String, Object>> markNotificationThreadAsRead(
        @Required @Named("id") String id
    );

    /**
     * Mark notifications as read for authenticated user.
     *
     * @param lastReadAt Describes the last point that notifications were checked. Anything updated since this time will not be updated. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Default: Time.now
     */ 
    Observable<Map<String, Object>> markNotificationsAsRead(
        @Named("lastReadAt") String lastReadAt
    );

    /**
     * Mark notifications in a repo as read.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param lastReadAt Describes the last point that notifications were checked. Anything updated since this time will not be updated. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Default: Time.now
     */ 
    Observable<Map<String, Object>> markNotificationsAsReadForRepository(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("lastReadAt") String lastReadAt
    );

    /**
     * This lets you subscribe or unsubscribe from a conversation. Unsubscribing from a conversation mutes all future notifications (until you comment or get @mentioned once more).
     *
     * @param id The ID of the thread
     * @param subscribed Determines if notifications should be received from this thread
     * @param ignored Determines if all notifications should be blocked from this thread
     */ 
    Observable<Map<String, Object>> setNotificationThreadSubscription(
        @Required @Named("id") String id,
        @Named("subscribed") String subscribed,
        @Named("ignored") String ignored
    );

    /**
     * Set a Repository Subscription
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param subscribed Determines if notifications should be received from this repository.
     * @param ignored Determines if all notifications should be blocked from this repository.
     */ 
    Observable<Map<String, Object>> setRepositorySubscription(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("subscribed") String subscribed,
        @Named("ignored") String ignored
    );

    /**
     * Star a repository
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     */ 
    Observable<Map<String, Object>> starRepository(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName
    );

    /**
     * Unstar a repository
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     */ 
    Observable<Map<String, Object>> unstarRepository(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName
    );

    /**
     * Unwatch a repository.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     */ 
    Observable<Map<String, Object>> unwatchRepository(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName
    );

    /**
     * Check an authorization
     *
     * @param token The access token to check.
     * @param clientId The 20 character OAuth app client key for which to create the token.
     * @param clientSecret The username obtained from Github.
     */ 
    Observable<Map<String, Object>> checkAuthorization(
        @Required @Named("token") String token,
        @Required @Named("clientId") String clientId,
        @Required @Named("clientSecret") String clientSecret
    );

    /**
     * Create a new authorization
     *
     * @param scopes A list of scopes that this authorization is in.
     * @param note A note to remind you what the OAuth token is for.
     * @param noteUrl A URL to remind you what app the OAuth token is for.
     * @param clientId The 20 character OAuth app client key for which to create the token.
     * @param clientSecret The 40 character OAuth app client secret for which to create the token.
     * @param fingerprint A unique string to distinguish an authorization from others created for the same client ID and user.
     */ 
    Observable<Map<String, Object>> createAuthorization(
        @Named("scopes") String scopes,
        @Named("note") String note,
        @Named("noteUrl") String noteUrl,
        @Required @Named("clientId") String clientId,
        @Named("clientSecret") String clientSecret,
        @Named("fingerprint") String fingerprint
    );

    /**
     * Delete an authorization
     *
     * @param username The username obtained from Github.
     * @param password The password obtained from Github.
     * @param id The authorization ID
     */ 
    Observable<Map<String, Object>> deleteAuthorization(
        @Required @Named("username") String username,
        @Required @Named("password") String password,
        @Required @Named("id") String id
    );

    /**
     * Delete a grant. (In preview period. See README.)
     *
     * @param username The username obtained from Github.
     * @param password The password obtained from Github.
     * @param id The authorization ID
     */ 
    Observable<Map<String, Object>> deleteGrantAuthorization(
        @Required @Named("username") String username,
        @Required @Named("password") String password,
        @Required @Named("id") String id
    );

    /**
     * Get a single authorization
     *
     * @param username The username obtained from Github.
     * @param password The password obtained from Github.
     * @param twoFactorCode Required for two-factor auth method.
     * @param id The authorization ID
     */ 
    Observable<Map<String, Object>> getAuthorization(
        @Required @Named("username") String username,
        @Required @Named("password") String password,
        @Named("twoFactorCode") String twoFactorCode,
        @Required @Named("id") String id
    );

    /**
     * List your authorizations
     *
     * @param username The username obtained from Github.
     * @param password The password obtained from Github.
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getAllAuthorization(
        @Required @Named("username") String username,
        @Required @Named("password") String password,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get a single grant. (In preview period. See README.)
     *
     * @param id The authorization ID
     * @param username The username obtained from Github.
     * @param password The password obtained from Github.
     * @param twoFactorCode Required for two-factor auth method.
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getGrantAuthorization(
        @Required @Named("id") String id,
        @Required @Named("username") String username,
        @Required @Named("password") String password,
        @Named("twoFactorCode") String twoFactorCode,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List your grants. (In preview period. See README.)
     *
     * @param username The username obtained from Github.
     * @param password The password obtained from Github.
     * @param twoFactorCode Required for two-factor auth method.
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getGrantsAuthorization(
        @Required @Named("username") String username,
        @Required @Named("password") String password,
        @Named("twoFactorCode") String twoFactorCode,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get or create an authorization for a specific app
     *
     * @param username The username obtained from Github.
     * @param password The password obtained from Github.
     * @param clientId The 20 character OAuth app client key for which to create the token.
     * @param clientSecret The 40 character OAuth app client secret associated with the client ID specified in the URL.
     * @param scopes A list of scopes that this authorization is in.
     * @param note A note to remind you what the OAuth token is for.
     * @param noteUrl A URL to remind you what app the OAuth token is for.
     * @param fingerprint A unique string to distinguish an authorization from others created for the same client ID and user.
     */ 
    Observable<Map<String, Object>> getOrCreateAuthorizationForApp(
        @Required @Named("username") String username,
        @Required @Named("password") String password,
        @Required @Named("clientId") String clientId,
        @Required @Named("clientSecret") String clientSecret,
        @Named("scopes") String scopes,
        @Named("note") String note,
        @Named("noteUrl") String noteUrl,
        @Named("fingerprint") String fingerprint
    );

    /**
     * Get or create an authorization for a specific app and fingerprint
     *
     * @param username The username obtained from Github.
     * @param password The password obtained from Github.
     * @param clientId The 20 character OAuth app client key for which to create the token.
     * @param fingerprint A unique string to distinguish an authorization from others created for the same client ID and user.
     * @param clientSecret The 40 character OAuth app client secret associated with the client ID specified in the URL.
     * @param scopes A list of scopes that this authorization is in.
     * @param note A note to remind you what the OAuth token is for.
     * @param noteUrl A URL to remind you what app the OAuth token is for.
     */ 
    Observable<Map<String, Object>> getOrCreateAuthorizationForAppAndFingerprint(
        @Required @Named("username") String username,
        @Required @Named("password") String password,
        @Required @Named("clientId") String clientId,
        @Named("fingerprint") String fingerprint,
        @Required @Named("clientSecret") String clientSecret,
        @Named("scopes") String scopes,
        @Named("note") String note,
        @Named("noteUrl") String noteUrl
    );

    /**
     * Reset an authorization
     *
     * @param token The access token to check.
     * @param clientId The 20 character OAuth app client key for which to create the token.
     * @param clientSecret The 40 character OAuth app client secret associated with the client ID specified in the URL.
     */ 
    Observable<Map<String, Object>> resetAuthorization(
        @Required @Named("token") String token,
        @Required @Named("clientId") String clientId,
        @Required @Named("clientSecret") String clientSecret
    );

    /**
     * Revoke an authorization for an application
     *
     * @param token The access token to check.
     * @param clientId The 20 character OAuth app client key for which to create the token.
     * @param clientSecret The 40 character OAuth app client secret associated with the client ID specified in the URL.
     */ 
    Observable<Map<String, Object>> revokeAuthorization(
        @Required @Named("token") String token,
        @Required @Named("clientId") String clientId,
        @Required @Named("clientSecret") String clientSecret
    );

    /**
     * Update an existing authorization
     *
     * @param username The username obtained from Github.
     * @param password The password obtained from Github.
     * @param id The authorization ID
     * @param scopes A list of scopes that this authorization is in.
     * @param addScopes A list of scopes to add to this authorization.
     * @param removeScopes A list of scopes to remove from this authorization.
     * @param note A note to remind you what the OAuth token is for.
     * @param noteUrl A URL to remind you what app the OAuth token is for.
     * @param fingerprint A unique string to distinguish an authorization from others created for the same client ID and user.
     */ 
    Observable<Map<String, Object>> updateAuthorization(
        @Required @Named("username") String username,
        @Required @Named("password") String password,
        @Required @Named("id") String id,
        @Named("scopes") String scopes,
        @Named("addScopes") String addScopes,
        @Named("removeScopes") String removeScopes,
        @Named("note") String note,
        @Named("noteUrl") String noteUrl,
        @Named("fingerprint") String fingerprint
    );

    /**
     * Create an organization
     *
     * @param login The organization's username.
     * @param admin The login of the user who will manage this organization.
     * @param profileName The organization's display name.
     */ 
    Observable<Map<String, Object>> createOrganizationEnterprise(
        @Required @Named("login") String login,
        @Required @Named("admin") String admin,
        @Named("profileName") String profileName
    );

    /**
     * Get license information
     *
     */ 
    Observable<Map<String, Object>> getLicenseEnterprise();

    /**
     * Queue an indexing job
     *
     * @param target A string representing the item to index.
     */ 
    Observable<Map<String, Object>> queueIndexingJobEnterprise(
        @Required @Named("target") String target
    );

    /**
     * Get statistics.
     *
     * @param type Possible values: issues, hooks, milestones, orgs, comments, pages, users, gists, pulls, repos, all.
     */ 
    Observable<Map<String, Object>> statsEnterprise(
        @Required @Named("type") String type
    );

    /**
     * Sync LDAP mapping for a team.
     *
     * @param teamId The ID of the team
     */ 
    Observable<Map<String, Object>> syncLdapForTeamEnterprise(
        @Required @Named("teamId") Number teamId
    );

    /**
     * Sync LDAP mapping for a user.
     *
     * @param user The user name
     */ 
    Observable<Map<String, Object>> syncLdapForUserEnterprise(
        @Required @Named("user") String user
    );

    /**
     * Update LDAP mapping for a team.
     *
     * @param teamId The ID of the team
     * @param data JSON payload with the new LDAP data.. Ex.: {"ldap_dn": "cn=Enterprise Ops,ou=teams,dc=github,dc=com"}
     */ 
    Observable<Map<String, Object>> updateLdapForTeamEnterprise(
        @Required @Named("teamId") Number teamId,
        @Named("data") String data
    );

    /**
     * Update LDAP mapping for a user.
     *
     * @param user The user name
     * @param data JSON payload with the new LDAP data.. Ex.: {"ldap_dn": "uid=asdf,ou=users,dc=github,dc=com"}
     */ 
    Observable<Map<String, Object>> updateLdapForUserEnterprise(
        @Required @Named("user") String user,
        @Named("data") String data
    );

    /**
     * Check if a gist is starred
     *
     * @param id Id (SHA1 hash) of the gist
     */ 
    Observable<Map<String, Object>> checkGistStar(
        @Required @Named("id") String id
    );

    /**
     * Create a gist
     *
     * @param files Files that make up this gist. The key of which should be a required string filename and the value another required hash with parameters: 'content'
     * @param description A description of the gist.
     * @param _public Indicates whether the gist is public. Default: false
     */ 
    Observable<Map<String, Object>> createGist(
        @Required @Named("files") String files,
        @Named("description") String description,
        @Required @Named("_public") String _public
    );

    /**
     * Create a gist
     *
     * @param fileName Name of file.
     * @param fileContents Contents of file.
     * @param description A description of the gist.
     * @param _public Indicates whether the gist is public. Default: false
     */ 
    Observable<Map<String, Object>> createSingleFileGist(
        @Required @Named("fileName") String fileName,
        @Required @Named("fileContents") String fileContents,
        @Named("description") String description,
        @Required @Named("_public") String _public
    );

    /**
     * Create a comment
     *
     * @param gistId Id (SHA1 hash) of the gist.
     * @param body The comment text.
     */ 
    Observable<Map<String, Object>> createGistComment(
        @Required @Named("gistId") String gistId,
        @Required @Named("body") String body
    );

    /**
     * Delete a gist
     *
     * @param id Id (SHA1 hash) of the gist.
     */ 
    Observable<Map<String, Object>> deleteGist(
        @Required @Named("id") String id
    );

    /**
     * Delete a comment
     *
     * @param gistId Id (SHA1 hash) of the gist.
     * @param commentId The comment ID.
     */ 
    Observable<Map<String, Object>> deleteGistComment(
        @Required @Named("gistId") String gistId,
        @Required @Named("commentId") String commentId
    );

    /**
     * Edit a gist
     *
     * @param id Id (SHA1 hash) of the gist.
     * @param description A description of the gist.
     * @param files Files that make up this gist. The key of which should be a required string filename and the value another required hash with parameters: 'content'
     */ 
    Observable<Map<String, Object>> editGist(
        @Required @Named("id") String id,
        @Named("description") String description,
        @Required @Named("files") String files
    );

    /**
     * Edit a comment
     *
     * @param gistId Id (SHA1 hash) of the gist.
     * @param commentId The comment ID.
     * @param body The comment text.
     */ 
    Observable<Map<String, Object>> updateGistComment(
        @Required @Named("gistId") String gistId,
        @Required @Named("commentId") String commentId,
        @Required @Named("body") String body
    );

    /**
     * Fork a gist
     *
     * @param id Id (SHA1 hash) of the gist.
     */ 
    Observable<Map<String, Object>> forkGist(
        @Required @Named("id") String id
    );

    /**
     * Get a single gist
     *
     * @param id Id (SHA1 hash) of the gist.
     */ 
    Observable<Map<String, Object>> getGist(
        @Required @Named("id") String id
    );

    /**
     * List the authenticated user's gists or if called anonymously, this will return all public gists
     *
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     * @param since Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
     */ 
    Observable<Map<String, Object>> getAllGists(
        @Named("page") Number page,
        @Named("perPage") Number perPage,
        @Named("since") String since
    );

    /**
     * Get a single comment
     *
     * @param gistId Id (SHA1 hash) of the gist.
     * @param id The comment ID.
     */ 
    Observable<Map<String, Object>> getGistComment(
        @Required @Named("gistId") String gistId,
        @Required @Named("id") String id
    );

    /**
     * List comments on a gist
     *
     * @param gistId Id (SHA1 hash) of the gist.
     */ 
    Observable<Map<String, Object>> getGistComments(
        @Required @Named("gistId") String gistId
    );

    /**
     * List gist commits
     *
     * @param id Id (SHA1 hash) of the gist.
     */ 
    Observable<Map<String, Object>> getGistCommits(
        @Required @Named("id") String id
    );

    /**
     * List a user's gists
     *
     * @param user The user name
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     * @param since Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
     */ 
    Observable<Map<String, Object>> getUserGists(
        @Required @Named("user") String user,
        @Named("page") Number page,
        @Named("perPage") Number perPage,
        @Named("since") String since
    );

    /**
     * List gist forks
     *
     * @param id Id (SHA1 hash) of the gist.
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getGistForks(
        @Required @Named("id") String id,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List all public gists
     *
     * @param since Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
     */ 
    Observable<Map<String, Object>> getPublicGists(
        @Named("since") String since
    );

    /**
     * Get a specific revision of a gist
     *
     * @param id Id (SHA1 hash) of the gist.
     * @param sha The SHA1 hash of the revision
     */ 
    Observable<Map<String, Object>> getGistByRevision(
        @Required @Named("id") String id,
        @Required @Named("sha") String sha
    );

    /**
     * List the authenticated user's starred gists
     *
     * @param since Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
     */ 
    Observable<Map<String, Object>> getStarredGists(
        @Named("since") String since
    );

    /**
     * Star a gist
     *
     * @param id Id (SHA1 hash) of the gist.
     */ 
    Observable<Map<String, Object>> starGist(
        @Required @Named("id") String id
    );

    /**
     * Unstar a gist
     *
     * @param id Id (SHA1 hash) of the gist.
     */ 
    Observable<Map<String, Object>> unstarGist(
        @Required @Named("id") String id
    );

    /**
     * Create a Blob
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param content The new blob's content.
     * @param encoding The encoding used for content. Currently, "utf-8" and "base64" are supported. Default: "utf-8".
     */ 
    Observable<Map<String, Object>> createBlob(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("content") String content,
        @Required @Named("encoding") String encoding
    );

    /**
     * Create a Commit
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param message String of the commit message
     * @param tree String of the SHA of the tree object this commit points to
     * @param parents Array of the SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided, for a merge commit, an array of more than one should be provided.
     * @param author An object containing information about the author. Avaliable parameters: "name" (string) The name of the author (or committer) of the commit; "email" (string) The email of the author (or committer) of the commit; "date" (string) Indicates when this commit was authored (or committed). This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Ex.:"author": {"name": "Scott Chacon", "email": "schacon@gmail.com", "date": "2008-07-09T16:13:30+12:00"}
     * @param committer An object containing information about the committer. Both the author and committer parameters have the same keys.
     */ 
    Observable<Map<String, Object>> createCommit(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("message") String message,
        @Required @Named("tree") String tree,
        @Required @Named("parents") String parents,
        @Named("author") String author,
        @Named("committer") String committer
    );

    /**
     * Create a Reference
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param ref String of the name of the fully qualified reference (ie: heads/master). If it doesn’t have at least one slash, it will be rejected.
     * @param sha The SHA1 value to set this reference to
     */ 
    Observable<Map<String, Object>> createReference(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("ref") String ref,
        @Required @Named("sha") String sha
    );

    /**
     * Create a Tag Object
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param tag String of the tag
     * @param message String of the tag message
     * @param object String of the SHA of the git object this is tagging
     * @param type String of the type of the object we’re tagging. Normally this is a commit but it can also be a tree or a blob.
     * @param tagger JSON object that contains the following keys: `name` - String of the name of the author of the tag, `email` - String of the email of the author of the tag, `date` - Timestamp of when this object was tagged
     */ 
    Observable<Map<String, Object>> createTag(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("tag") String tag,
        @Required @Named("message") String message,
        @Required @Named("object") String object,
        @Required @Named("type") String type,
        @Required @Named("tagger") String tagger
    );

    /**
     * Create a Tree
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param tree Array of Hash objects (of path, mode, type and sha) specifying a tree structure
     * @param baseTree String of the SHA1 of the tree you want to update with new data
     */ 
    Observable<Map<String, Object>> createTree(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("tree") String tree,
        @Named("baseTree") String baseTree
    );

    /**
     * Delete a Reference
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param ref String of the name of the fully qualified reference (ie: heads/master). If it doesn’t have at least one slash, it will be rejected.
     */ 
    Observable<Map<String, Object>> deleteReference(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("ref") String ref
    );

    /**
     * Get a Blob
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param sha The SHA1 value to set this reference to
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getBlob(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("sha") String sha,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get a Commit
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param sha The SHA1 value to set this reference to
     */ 
    Observable<Map<String, Object>> getCommit(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("sha") String sha
    );

    /**
     * Get a Commit Signature Verification. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param sha The SHA1 value to set this reference to
     */ 
    Observable<Map<String, Object>> getCommitSignatureVerification(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("sha") String sha
    );

    /**
     * Get a Reference
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param ref String of the name of the fully qualified reference (ie: heads/master). If it doesn’t have at least one slash, it will be rejected.
     */ 
    Observable<Map<String, Object>> getReference(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("ref") String ref
    );

    /**
     * Get all References
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getReferences(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get a Tag
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param sha The SHA1 value to set this reference to
     */ 
    Observable<Map<String, Object>> getTag(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("sha") String sha
    );

    /**
     * Get a Tag Signature Verification. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param sha The SHA1 value to set this reference to
     */ 
    Observable<Map<String, Object>> getTagSignatureVerification(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("sha") String sha
    );

    /**
     * Get all tag References
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getTags(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get a Tree
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param sha The SHA1 value to set this reference to
     * @param recursive Get a Tree Recursively. True or false
     */ 
    Observable<Map<String, Object>> getTree(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("sha") String sha,
        @Named("recursive") String recursive
    );

    /**
     * Update a Reference
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param ref String of the name of the fully qualified reference (ie: heads/master). If it doesn’t have at least one slash, it will be rejected.
     * @param sha The SHA1 value to set this reference to
     * @param force Boolean indicating whether to force the update or to make sure the update is a fast-forward update. The default is false, so leaving this out or setting it to false will make sure you’re not overwriting work.
     */ 
    Observable<Map<String, Object>> updateReference(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("ref") String ref,
        @Required @Named("sha") String sha,
        @Named("force") String force
    );

    /**
     * Create a new access token
     *
     * @param installationId The id of the installation for this integration.
     * @param userId The id of the user for whom the integration is acting on behalf of.
     */ 
    Observable<Map<String, Object>> createInstallation(
        @Required @Named("installationId") Number installationId,
        @Named("userId") Number userId
    );

    /**
     * Add assignees to an issue.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param number The number of the issue
     * @param assignees Logins for the users that should be added to the issue.
     */ 
    Observable<Map<String, Object>> addAssigneesToIssue(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number,
        @Required @Named("assignees") String assignees
    );

    /**
     * Add labels to an issue
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param number The number of the issue
     * @param body Array of the labels that should be added to the issue.
     */ 
    Observable<Map<String, Object>> addIssueLabels(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number,
        @Required @Named("body") String body
    );

    /**
     * Check assignee
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param assignee Login for the user that this issue should be assigned to.
     */ 
    Observable<Map<String, Object>> checkAssignee(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("assignee") String assignee
    );

    /**
     * Create an issue
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param title The title of the issue.
     * @param body The contents of the issue.
     * @param assignee Login for the user that this issue should be assigned to.
     * @param milestone Milestone to associate this issue with.
     * @param labels Array of strings - Labels to associate with this issue.
     * @param assignees Logins for Users to assign to this issue. NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise.
     */ 
    Observable<Map<String, Object>> createIssue(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("title") String title,
        @Named("body") String body,
        @Named("assignee") String assignee,
        @Named("milestone") Number milestone,
        @Named("labels") String labels,
        @Named("assignees") String assignees
    );

    /**
     * Create a comment
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param number The number of the issue
     * @param body The contents of the comment. Ex.: {"body": "Me too"}
     */ 
    Observable<Map<String, Object>> createIssueComment(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number,
        @Required @Named("body") String body
    );

    /**
     * Create a label
     *
     * @param user The owner name.
     * @param repositoryName The name of the repository.
     * @param name The name of the label.
     * @param color 6 character hex code, without a leading #.
     */ 
    Observable<Map<String, Object>> createLabel(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("name") String name,
        @Required @Named("color") String color
    );

    /**
     * Create a milestone
     *
     * @param user The owner name.
     * @param repositoryName The name of the repository.
     * @param title The title of the milestone.
     * @param state The state of the milestone. Either open or closed. Default: open
     * @param description A description of the milestone.
     * @param dueOn Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
     */ 
    Observable<Map<String, Object>> createMilestone(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("title") String title,
        @Named("state") String state,
        @Named("description") String description,
        @Named("dueOn") String dueOn
    );

    /**
     * Delete a comment
     *
     * @param user The owner name.
     * @param repositoryName The name of the repository.
     * @param id The ID of the comment
     */ 
    Observable<Map<String, Object>> deleteIssueComment(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id
    );

    /**
     * Delete a label
     *
     * @param user The owner name.
     * @param repositoryName The name of the repository.
     * @param name The name of the label.
     */ 
    Observable<Map<String, Object>> deleteLabel(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("name") String name
    );

    /**
     * Delete a milestone
     *
     * @param user The owner name.
     * @param repositoryName The name of the repository
     * @param number The number of the milestone.
     */ 
    Observable<Map<String, Object>> deleteMilestone(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number
    );

    /**
     * Edit an issue
     *
     * @param user The owner name.
     * @param repositoryName The name of the repository.
     * @param number The number of the issue.
     * @param title The title of the issue.
     * @param body The contents of the issue.
     * @param state State of the issue. Either open or closed.
     * @param milestone Milestone to associate this issue with.
     * @param labels Array of strings - Labels to associate with this issue.
     * @param assignees Logins for Users to assign to this issue. Pass one or more user logins to replace the set of assignees on this Issue. .Send an empty array ([]) to clear all assignees from the Issue. NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise.
     */ 
    Observable<Map<String, Object>> updateIssue(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number,
        @Named("title") String title,
        @Named("body") String body,
        @Named("state") String state,
        @Named("milestone") Number milestone,
        @Named("labels") String labels,
        @Named("assignees") String assignees
    );

    /**
     * Edit a comment
     *
     * @param user The owner name.
     * @param repositoryName The name of the repository.
     * @param id The ID of the comment.
     * @param body The contents of the comment.. Ex.: {"body": "Me too"}
     */ 
    Observable<Map<String, Object>> updateIssueComment(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id,
        @Required @Named("body") String body
    );

    /**
     * Get a single issue
     *
     * @param user The owner name.
     * @param repositoryName The name of the repository.
     * @param number The number of the issue.
     */ 
    Observable<Map<String, Object>> getIssue(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number
    );

    /**
     * List all issues across all the authenticated user's visible repositories including owned repositories, member repositories, and organization repositories
     *
     * @param filter Indicates which sorts of issues to return. Can be one of: * assigned: Issues assigned to you, * created: Issues created by you, * mentioned: Issues mentioning you, * subscribed: Issues you're subscribed to updates for, * all: All issues the authenticated user can see, regardless of participation or creation, Default: assigned
     * @param state Indicates the state of the issues to return. Can be either open, closed, or all. Default: open
     * @param labels String list of comma separated Label names. Example: bug,ui,@high
     * @param sort What to sort results by. Can be either created, updated, comments. Default: created
     * @param direction The direction of the sort. Can be either asc or desc. Default: desc
     * @param since Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getAllIssues(
        @Named("filter") String filter,
        @Named("state") String state,
        @Named("labels") String labels,
        @Named("sort") String sort,
        @Named("direction") String direction,
        @Named("since") String since,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List assignees
     *
     * @param user The owner name.
     * @param repositoryName The name of the repository.
     */ 
    Observable<Map<String, Object>> getAssignees(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName
    );

    /**
     * Get a single comment
     *
     * @param user The owner name.
     * @param repositoryName The name of the repository.
     * @param id The ID of the comment.
     */ 
    Observable<Map<String, Object>> getIssueComment(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id
    );

    /**
     * List comments on an issue
     *
     * @param user The owner name.
     * @param repositoryName The name of the repository.
     * @param number The number of the issue.
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getIssueComments(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List comments in a repository
     *
     * @param user The owner name.
     * @param repositoryName The name of the repository.
     * @param sort Either created or updated. Default: created
     * @param direction Either asc or desc. Ignored without the sort parameter.
     * @param since Only comments updated at or after this time are returned. Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getIssuesCommentsForRepository(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("sort") String sort,
        @Named("direction") String direction,
        @Named("since") String since,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get a single event
     *
     * @param user The owner name.
     * @param repositoryName The name of the reposotiry.
     * @param id The ID of the event.
     */ 
    Observable<Map<String, Object>> getIssueEvent(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id
    );

    /**
     * List events for an issue
     *
     * @param user The owner name.
     * @param repositoryName The name of the repository.
     * @param number The number of the issue.
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getIssueEvents(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List events for a repository
     *
     * @param user The owner name.
     * @param repositoryName The name of the repository.
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getIssueEventsForRepository(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List events for an issue. (In preview period. See README.)
     *
     * @param user The owner name.
     * @param repositoryName The name of the repository.
     * @param number  The number of the issue.
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getIssueEventsTimeline(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List all issues for a given organization for the authenticated user
     *
     * @param organizationName The name of the organization.
     * @param filter Indicates which sorts of issues to return. Can be one of: * assigned: Issues assigned to you, * created: Issues created by you, * mentioned: Issues mentioning you, * subscribed: Issues you're subscribed to updates for, * all: All issues the authenticated user can see, regardless of participation or creation, Default: assigned
     * @param state Indicates the state of the issues to return. Can be either open, closed, or all. Default: open
     * @param labels String list of comma separated Label names. Example: bug,ui,@high
     * @param sort What to sort results by. Can be either created, updated, comments. Default: created
     * @param direction The direction of the sort. Can be either asc or desc. Default: desc
     * @param since Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getIssuesForOrganization(
        @Required @Named("organizationName") String organizationName,
        @Named("filter") String filter,
        @Named("state") String state,
        @Named("labels") String labels,
        @Named("sort") String sort,
        @Named("direction") String direction,
        @Named("since") String since,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List issues for a repository
     *
     * @param user The owner name.
     * @param repositoryName The name of the repository.
     * @param milestone If an integer is passed, it should refer to a milestone by its number field. If the string * is passed, issues with any milestone are accepted. If the string none is passed, issues without milestones are returned.
     * @param state Indicates the state of the issues to return. Can be either open, closed, or all. Default: open
     * @param assignee String User login, `none` for Issues with no assigned User. `*` for Issues with any assigned User.
     * @param creator The user that created the issue.
     * @param mentioned A user that's mentioned in the issue.
     * @param labels String list of comma separated Label names. Example: bug,ui,@high
     * @param sort What to sort results by. Can be either created, updated, comments. Default: created
     * @param direction The direction of the sort. Can be either asc or desc. Default: desc
     * @param since Only issues updated at or after this time are returned. Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getIssuesForRepository(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("milestone") String milestone,
        @Named("state") String state,
        @Named("assignee") String assignee,
        @Named("creator") String creator,
        @Named("mentioned") String mentioned,
        @Named("labels") String labels,
        @Named("sort") String sort,
        @Named("direction") String direction,
        @Named("since") String since,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List all issues across owned and member repositories for the authenticated user
     *
     * @param filter Indicates which sorts of issues to return. Can be one of: * assigned: Issues assigned to you, * created: Issues created by you, * mentioned: Issues mentioning you, * subscribed: Issues you're subscribed to updates for, * all: All issues the authenticated user can see, regardless of participation or creation, Default: assigned
     * @param state Indicates the state of the issues to return. Can be either open, closed, or all. Default: open
     * @param labels String list of comma separated Label names. Example: bug,ui,@high
     * @param sort What to sort results by. Can be either created, updated, comments. Default: created
     * @param direction The direction of the sort. Can be either asc or desc. Default: desc
     * @param since Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getUserIssues(
        @Named("filter") String filter,
        @Named("state") String state,
        @Named("labels") String labels,
        @Named("sort") String sort,
        @Named("direction") String direction,
        @Named("since") String since,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List labels on an issue
     *
     * @param user The owner name.
     * @param repositoryName The name of the repository.
     * @param number The number of the issue.
     */ 
    Observable<Map<String, Object>> getIssueLabels(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number
    );

    /**
     * Get a single label
     *
     * @param user The owner name.
     * @param repositoryName The name of the repository.
     * @param name The name of the label.
     */ 
    Observable<Map<String, Object>> getLabel(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("name") String name
    );

    /**
     * List all labels for this repository
     *
     * @param user The owner name.
     * @param repositoryName The name of the repository.
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryLabels(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get a single milestone
     *
     * @param user The owner name.
     * @param repositoryName The name of the repository.
     * @param number The number of the milestone.
     */ 
    Observable<Map<String, Object>> getMilestone(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number
    );

    /**
     * Get labels for every issue in a milestone
     *
     * @param user The owner name.
     * @param repositoryName The name of the repository.
     * @param number The number of the milestone.
     */ 
    Observable<Map<String, Object>> getMilestoneLabels(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number
    );

    /**
     * List milestones for a repository
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param state The state of the milestone. Either open, closed, or all. Default: open
     * @param sort What to sort results by. Either due_on or completeness. Default: due_on
     * @param direction The direction of the sort. Either asc or desc. Default: asc
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryMilestones(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("state") String state,
        @Named("sort") String sort,
        @Named("direction") String direction,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Users with push access can lock an issue's conversation.
     *
     * @param user he owner name
     * @param repositoryName The name of the repository
     * @param number The number of the issue.
     */ 
    Observable<Map<String, Object>> lockIssue(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number
    );

    /**
     * Remove all labels from an issue
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param number The number of the issue.
     */ 
    Observable<Map<String, Object>> removeIssueAllLabels(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number
    );

    /**
     * Remove assignees from an issue.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param number The number of the issue.
     * @param assignees Logins for the users that should be removed from the issue.. Ex.: "assignees": ["hubot", "other_assignee"]
     */ 
    Observable<Map<String, Object>> removeAssigneesFromIssue(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number,
        @Required @Named("assignees") String assignees
    );

    /**
     * Remove a label from an issue
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param number The number of the issue.
     * @param name The name of the label.
     */ 
    Observable<Map<String, Object>> removeIssueLabel(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number,
        @Required @Named("name") String name
    );

    /**
     * Replace all labels for an issue
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param number The number of the issue.
     * @param body Array of the labels that should be replaced for the issue. Sending an empty array ([]) will remove all Labels from the Issue.
     */ 
    Observable<Map<String, Object>> replaceAllIssueLabels(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number,
        @Required @Named("body") String body
    );

    /**
     * Users with push access can unlock an issue's conversation.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param number The number of the issue
     */ 
    Observable<Map<String, Object>> unlockIssue(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number
    );

    /**
     * Update a label
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param oldname The old name of the label.
     * @param name The new name of the label.
     * @param color 6 character hex code, without a leading #.
     */ 
    Observable<Map<String, Object>> updateLabel(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("oldname") String oldname,
        @Required @Named("name") String name,
        @Required @Named("color") String color
    );

    /**
     * Update a milestone
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param number The number of the milestone
     * @param title The title of the milestone.
     * @param state The state of the milestone. Either open or closed. Default: open
     * @param description A description of the milestone.
     * @param dueOn The milestone due date. Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
     */ 
    Observable<Map<String, Object>> updateMilestone(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number,
        @Required @Named("title") String title,
        @Named("state") String state,
        @Named("description") String description,
        @Named("dueOn") String dueOn
    );

    /**
     * Cancel an import. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     */ 
    Observable<Map<String, Object>> cancelImport(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName
    );

    /**
     * Delete a migration archive
     *
     * @param organizationName The name of the organization
     * @param id The migration ID.
     */ 
    Observable<Map<String, Object>> deleteMigrationArchive(
        @Required @Named("organizationName") String organizationName,
        @Required @Named("id") String id
    );

    /**
     * Get import commit authors. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param since Only authors found after this id are returned. Provide the highest author ID you've seen so far. New authors may be added to the list at any point while the importer is performing the raw step.
     */ 
    Observable<Map<String, Object>> getImportCommitAuthors(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("since") String since
    );

    /**
     * Get import progress. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     */ 
    Observable<Map<String, Object>> getImportProgress(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName
    );

    /**
     * List files larger than 100MB found during the import. (In preview period. See README.)
     *
     * @param user The owner name
     * @param name The name of the system to import from. Supported Subversion, Mercurial, and TFS.
     */ 
    Observable<Map<String, Object>> getLargeImportFiles(
        @Required @Named("user") String user,
        @Required @Named("name") String name
    );

    /**
     * Get the URL to a migration archive.
     *
     * @param organizationName The name of the organization
     * @param id The ID of the migration
     */ 
    Observable<Map<String, Object>> getMigrationArchiveLink(
        @Required @Named("organizationName") String organizationName,
        @Required @Named("id") String id
    );

    /**
     * Get the status of a migration
     *
     * @param organizationName The name of the organization
     * @param id The ID of the migration
     */ 
    Observable<Map<String, Object>> getMigrationStatus(
        @Required @Named("organizationName") String organizationName,
        @Required @Named("id") String id
    );

    /**
     * Get a list of migrations
     *
     * @param organizationName The name of the organization
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getMigrations(
        @Required @Named("organizationName") String organizationName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Map a commit author. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param authorId The commit author id.
     * @param email The new Git author email.
     * @param name The new Git author name.
     */ 
    Observable<Map<String, Object>> mapImportCommitAuthor(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("authorId") String authorId,
        @Named("email") String email,
        @Named("name") String name
    );

    /**
     * Set import LFS preference. (In preview period. See README.)
     *
     * @param user The owner name
     * @param systemName The name of the system to import from. Supported Subversion, Mercurial, and TFS.
     */ 
    Observable<Map<String, Object>> setImportLfsPreference(
        @Required @Named("user") String user,
        @Required @Named("systemName") String systemName
    );

    /**
     * Start an import. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param vcsUrl The URL of the originating repository.
     * @param vcs The originating VCS type. Can be one of subversion, git, mercurial, or tfvc. Please be aware that without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.
     * @param vcsUsername If authentication is required, the username to provide to vcs_url.
     * @param vcsPassword If authentication is required, the password to provide to vcs_url.
     * @param tfvcProject For a tfvc import, the name of the project that is being imported.
     */ 
    Observable<Map<String, Object>> startImport(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("vcsUrl") String vcsUrl,
        @Named("vcs") String vcs,
        @Required @Named("vcsUsername") String vcsUsername,
        @Required @Named("vcsPassword") String vcsPassword,
        @Named("tfvcProject") String tfvcProject
    );

    /**
     * Start a migration.
     *
     * @param organizationName The name of the organization
     * @param repositories A list of arrays indicating which repositories should be migrated.
     * @param lockRepositories Indicates whether repositories should be locked (to prevent manipulation) while migrating data. Default: false.
     * @param excludeAttachments Indicates whether attachments should be excluded from the migration (to reduce migration archive file size). Default: false.
     */ 
    Observable<Map<String, Object>> startMigration(
        @Required @Named("organizationName") String organizationName,
        @Required @Named("repositories") String repositories,
        @Named("lockRepositories") String lockRepositories,
        @Named("excludeAttachments") String excludeAttachments
    );

    /**
     * Unlock a repository that was locked for migration.
     *
     * @param organizationName The name of the organization
     * @param id The ID of the migration
     * @param repositoryName The name of the repository
     */ 
    Observable<Map<String, Object>> unlockRepositoryLockedForMigration(
        @Required @Named("organizationName") String organizationName,
        @Required @Named("id") String id,
        @Required @Named("repositoryName") String repositoryName
    );

    /**
     * Update existing import. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param data Json object with data to be updating. If no data are provided, the import will be restarted. Ex.: {"vcs": "tfvc", "tfvc_project": "project1", "human_name": "project1 (tfs)"}
     */ 
    Observable<Map<String, Object>> updateImport(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("data") String data
    );

    /**
     * Lists all the emojis available to use on GitHub.
     *
     */ 
    Observable<Map<String, Object>> getEmojis();

    /**
     * Get a single gitignore template
     *
     * @param name The name of the .gitignore template to get e.g. 'C'
     */ 
    Observable<Map<String, Object>> getGitignoreTemplate(
        @Required @Named("name") String name
    );

    /**
     * Lists available gitignore templates
     *
     */ 
    Observable<Map<String, Object>> getGitignoreTemplates();

    /**
     * Get an individual license. (In preview period. See README.)
     *
     * @param license The name of the license. Ex: mit
     */ 
    Observable<Map<String, Object>> getLicense(
        @Required @Named("license") String license
    );

    /**
     * List all licenses. (In preview period. See README.)
     *
     */ 
    Observable<Map<String, Object>> getLicenses();

    /**
     * This endpoint provides information about GitHub.com, the service. Or, if you access this endpoint on your organization's GitHub Enterprise installation, this endpoint provides information about that installation.
     *
     */ 
    Observable<Map<String, Object>> getMeta();

    /**
     * Get your current rate limit status
     *
     */ 
    Observable<Map<String, Object>> getRateLimit();

    /**
     * Get the contents of a repository's license. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     */ 
    Observable<Map<String, Object>> getRepoLicenseMisc(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName
    );

    /**
     * Render an arbitrary Markdown document
     *
     * @param text The Markdown text to render
     * @param mode The rendering mode, `markdown` to render a document as plain Markdown, just like README files are rendered. `gfm` to render a document as user-content, e.g. like user comments or issues are rendered. In GFM mode, hard line breaks are always taken into account, and issue and user mentions are linked accordingly.
     * @param context The repository context. Only taken into account when rendering as `gfm`
     */ 
    Observable<Map<String, Object>> renderMarkdown(
        @Required @Named("text") String text,
        @Named("mode") String mode,
        @Named("context") String context
    );

    /**
     * Render a Markdown document in raw mode
     *
     * @param data Raw data to send as the body of the request
     */ 
    Observable<Map<String, Object>> renderMarkdownRaw(
        @Required @Named("data") String data
    );

    /**
     * Add or update organization membership
     *
     * @param organizationName The name of the organization
     * @param user The user name
     * @param role The role to give the user in the organization.. * admin - The user will become an owner of the organization, * member - The user will become a non-owner member of the organization. Default: member
     */ 
    Observable<Map<String, Object>> addOrganizationMembership(
        @Required @Named("organizationName") String organizationName,
        @Required @Named("user") String user,
        @Required @Named("role") String role
    );

    /**
     * Add team membership
     *
     * @param id The team ID
     * @param user The user name
     * @param role The role that this user should have in the team.. The role that this user should have in the team. Can be one of: * member - a normal member of the team, * maintainer - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description. Default: member
     */ 
    Observable<Map<String, Object>> addOrganizationTeamMembership(
        @Required @Named("id") String id,
        @Required @Named("user") String user,
        @Named("role") String role
    );

    /**
     * Add team repository
     *
     * @param id The team ID
     * @param organizationName The name of the organization
     * @param repositoryName The name of the repository
     * @param permission `pull` - team members can pull, but not push or administer this repository, `push` - team members can pull and push, but not administer this repository, `admin` - team members can pull, push and administer this repository.
     */ 
    Observable<Map<String, Object>> addOrganizationTeamRepository(
        @Required @Named("id") String id,
        @Required @Named("organizationName") String organizationName,
        @Required @Named("repositoryName") String repositoryName,
        @Named("permission") String permission
    );

    /**
     * Check membership
     *
     * @param organizationName The name of the organization
     * @param user The user name
     */ 
    Observable<Map<String, Object>> checkOrganizationMembership(
        @Required @Named("organizationName") String organizationName,
        @Required @Named("user") String user
    );

    /**
     * Check public membership
     *
     * @param organizationName The name of the organization
     * @param user The user name
     */ 
    Observable<Map<String, Object>> checkOrganizationPublicMembership(
        @Required @Named("organizationName") String organizationName,
        @Required @Named("user") String user
    );

    /**
     * Check if a team manages a repository
     *
     * @param id The team ID
     * @param user The user name
     * @param repositoryName The name of the repository
     */ 
    Observable<Map<String, Object>> checkOrganizationTeamRepository(
        @Required @Named("id") String id,
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName
    );

    /**
     * Conceal a user's membership
     *
     * @param organizationName The name of the organization
     * @param user The user name
     */ 
    Observable<Map<String, Object>> cancelOrganizationMembership(
        @Required @Named("organizationName") String organizationName,
        @Required @Named("user") String user
    );

    /**
     * Create a hook
     *
     * @param organizationName The name of the organization
     * @param name Must be passed as "web".
     * @param config Key/value pairs to provide settings for this webhook. The config object can accept the following keys: *url (Required) - The URL to which the payloads will be delivered; *content_type (string) - The media type used to serialize the payloads. Supported values include json and form. The default is form; *secret (string) - If provided, payloads will be delivered with an X-Hub-Signature header. The value of this header is computed as the [HMAC hex digest of the body, using the secret as the key][hub-signature]; *insecure_ssl (string) - Determines whether the SSL certificate of the host for url will be verified when delivering payloads. Supported values include "0" (verification is performed) and "1" (verification is not performed). The default is "0". We strongly recommend not setting this to "1" as you are subject to man-in-the-middle and other attacks.
     * @param events Determines what events the hook is triggered for. Default: ["push"].
     * @param active Determines whether the hook is actually triggered on pushes.
     */ 
    Observable<Map<String, Object>> createOrganizationHook(
        @Required @Named("organizationName") String organizationName,
        @Required @Named("name") String name,
        @Required @Named("config") String config,
        @Named("events") String events,
        @Named("active") String active
    );

    /**
     * Create team
     *
     * @param organizationName The name of the organization
     * @param name The name of the team.
     * @param description The description of the team.
     * @param repoNames The full name (e.g., "organization-name/repository-name") of repositories to add the team to.
     * @param privacy The level of privacy this team should have.. Can be one of: * secret - only visible to organization owners and members of this team. * closed - visible to all members of this organization. Default: secret
     */ 
    Observable<Map<String, Object>> createOrganizationTeam(
        @Required @Named("organizationName") String organizationName,
        @Required @Named("name") String name,
        @Named("description") String description,
        @Named("repoNames") String repoNames,
        @Named("privacy") String privacy
    );

    /**
     * Delete a hook
     *
     * @param organizationName The name of the organization
     * @param id The hook ID
     */ 
    Observable<Map<String, Object>> deleteOrganizationHook(
        @Required @Named("organizationName") String organizationName,
        @Required @Named("id") String id
    );

    /**
     * @param id The team ID
     */ 
    Observable<Map<String, Object>> deleteOrganizationTeam(
        @Required @Named("id") String id
    );

    /**
     * Remove team repository
     *
     * @param id The team ID
     * @param user The owner name
     * @param repositoryName The name of the repository
     */ 
    Observable<Map<String, Object>> deleteOrganizationTeamRepository(
        @Required @Named("id") String id,
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName
    );

    /**
     * Edit a hook
     *
     * @param organizationName The name of the organization
     * @param id The hook ID
     * @param config Key/value pairs to provide settings for this webhook. The config object can accept the following keys: *url (Required) - The URL to which the payloads will be delivered; *content_type (string) - The media type used to serialize the payloads. Supported values include json and form. The default is form; *secret (string) - If provided, payloads will be delivered with an X-Hub-Signature header. The value of this header is computed as the [HMAC hex digest of the body, using the secret as the key][hub-signature]; *insecure_ssl (string) - Determines whether the SSL certificate of the host for url will be verified when delivering payloads. Supported values include "0" (verification is performed) and "1" (verification is not performed). The default is "0". We strongly recommend not setting this to "1" as you are subject to man-in-the-middle and other attacks.
     * @param events Determines what events the hook is triggered for. Default: ["push"].
     * @param active Determines whether the hook is actually triggered on pushes.
     */ 
    Observable<Map<String, Object>> editOrganizationHook(
        @Required @Named("organizationName") String organizationName,
        @Required @Named("id") String id,
        @Required @Named("config") String config,
        @Named("events") String events,
        @Named("active") String active
    );

    /**
     * Edit team
     *
     * @param id The team ID
     * @param name The name of the team.
     * @param description The description of the team.
     * @param privacy The level of privacy this team should have.. Can be one of: * secret - only visible to organization owners and members of this team. * closed - visible to all members of this organization. Default: secret
     */ 
    Observable<Map<String, Object>> editOrganizationTeam(
        @Required @Named("id") String id,
        @Required @Named("name") String name,
        @Named("description") String description,
        @Named("privacy") String privacy
    );

    /**
     * Get an organization
     *
     * @param organizationName The name of the organization
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getOrganization(
        @Required @Named("organizationName") String organizationName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List all organizations
     *
     * @param since The integer ID of the last Organization that you've seen.
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getAllOrganizations(
        @Named("since") String since,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List organizations for the authenticated user.
     *
     * @param user The user name
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getUserOrganizations(
        @Required @Named("user") String user,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get single hook
     *
     * @param organizationName The name of the organization
     * @param id The hook ID
     */ 
    Observable<Map<String, Object>> getOrganizationHook(
        @Required @Named("organizationName") String organizationName,
        @Required @Named("id") String id
    );

    /**
     * List hooks
     *
     * @param organizationName The name of the organization
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getOrganizationHooks(
        @Required @Named("organizationName") String organizationName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Members list
     *
     * @param organizationName The name of the organization
     * @param filter Filter members returned in the list.. Can be one of: * 2fa_disabled: Members without two-factor authentication enabled. Available for organization owners. * all: All members the authenticated user can see.
     * @param role Filter members returned by their role.. Can be one of: * all: All members of the organization, regardless of role. * admin: Organization owners. * member: Non-owner organization members. Default: all
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getOrganizationMembers(
        @Required @Named("organizationName") String organizationName,
        @Named("filter") String filter,
        @Named("role") String role,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get organization membership
     *
     * @param organizationName The name of the organization
     * @param user The user name
     */ 
    Observable<Map<String, Object>> getOrganizationMembership(
        @Required @Named("organizationName") String organizationName,
        @Required @Named("user") String user
    );

    /**
     * List your organization memberships
     *
     * @param state Indicates the state of the memberships to return. Can be either active or pending. If not specified, both active and pending memberships are returned.
     */ 
    Observable<Map<String, Object>> getOrganizationMemberships(
        @Named("state") String state
    );

    /**
     * Public members list
     *
     * @param organizationName The name of the organization
     */ 
    Observable<Map<String, Object>> getOrganizationPublicMembers(
        @Required @Named("organizationName") String organizationName
    );

    /**
     * Get team
     *
     * @param id The team ID
     */ 
    Observable<Map<String, Object>> getOrganizationTeam(
        @Required @Named("id") String id
    );

    /**
     * @param id  The team ID
     * @param role Filters members returned by their role in the team.. Can be one of: * member - normal members of the team. * maintainer - team maintainers. * all - all members of the team. Default: all
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getOrganizationTeamMembers(
        @Required @Named("id") String id,
        @Named("role") String role,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get team membership
     *
     * @param id The team ID
     * @param user The user name
     */ 
    Observable<Map<String, Object>> getOrganizationTeamMembership(
        @Required @Named("id") String id,
        @Required @Named("user") String user
    );

    /**
     * Get team repos
     *
     * @param id The team ID
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getOrganizationTeamRepositories(
        @Required @Named("id") String id,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List teams
     *
     * @param organizationName The name of the organization
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getOrganizationTeams(
        @Required @Named("organizationName") String organizationName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Ping a hook
     *
     * @param organizationName The name of the organization
     * @param id The hook ID
     */ 
    Observable<Map<String, Object>> pingOrganizationHook(
        @Required @Named("organizationName") String organizationName,
        @Required @Named("id") String id
    );

    /**
     * Publicize a user's membership
     *
     * @param organizationName The name of the organization
     * @param user The user name
     */ 
    Observable<Map<String, Object>> publicizeOrganizationMembership(
        @Required @Named("organizationName") String organizationName,
        @Required @Named("user") String user
    );

    /**
     * Remove a member
     *
     * @param organizationName The name of the organization
     * @param user The user name
     */ 
    Observable<Map<String, Object>> removeOrganizationMember(
        @Required @Named("organizationName") String organizationName,
        @Required @Named("user") String user
    );

    /**
     * Remove organization membership
     *
     * @param organizationName The name of the organization
     * @param user The user name
     */ 
    Observable<Map<String, Object>> removeOrganizationMembership(
        @Required @Named("organizationName") String organizationName,
        @Required @Named("user") String user
    );

    /**
     * Remove team membership
     *
     * @param id The team ID
     * @param user The user name
     */ 
    Observable<Map<String, Object>> removeOrganizationTeamMembership(
        @Required @Named("id") String id,
        @Required @Named("user") String user
    );

    /**
     * Edit an organization
     *
     * @param organizationName The name of the organization
     * @param billingEmail Billing email address. This address is not publicized.
     * @param company The company name.
     * @param email The publicly visible email address.
     * @param location The location.
     * @param name The shorthand name of the company.
     * @param description The description of the company.
     */ 
    Observable<Map<String, Object>> updateOrganization(
        @Required @Named("organizationName") String organizationName,
        @Named("billingEmail") String billingEmail,
        @Named("company") String company,
        @Named("email") String email,
        @Named("location") String location,
        @Named("name") String name,
        @Named("description") String description
    );

    /**
     * Get if a pull request has been merged
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param number The number of the pull request
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> checkMergedPullRequest(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Create a pull request
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param title The title of the pull request.
     * @param head The branch (or git ref) where your changes are implemented.. For cross-repository pull requests in the same network, namespace head with a user like this: username:branch.
     * @param base The branch (or git ref) you want your changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repositoryName that requests a merge to a base of another repositoryName.
     * @param body The contents of the pull request.
     */ 
    Observable<Map<String, Object>> createPullRequest(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("title") String title,
        @Required @Named("head") String head,
        @Required @Named("base") String base,
        @Named("body") String body
    );

    /**
     * Create a comment
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param number The number of the pull request
     * @param body The text of the comment
     * @param commitId Sha of the commit to comment on.
     * @param path Relative path of the file to comment on.
     * @param position Column index in the diff to comment on.
     */ 
    Observable<Map<String, Object>> createPullRequestComment(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number,
        @Required @Named("body") String body,
        @Required @Named("commitId") String commitId,
        @Required @Named("path") String path,
        @Required @Named("position") Number position
    );

    /**
     * Reply to existing pull request comment
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param number The number of the pull request
     * @param body The text of the comment
     * @param inReplyTo The comment id to reply to.
     */ 
    Observable<Map<String, Object>> createPullRequestCommentReply(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number,
        @Required @Named("body") String body,
        @Required @Named("inReplyTo") Number inReplyTo
    );

    /**
     * Create a pull request from an existing issue
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param issue The issue number in this repository to turn into a Pull Request.
     * @param head The branch (or git ref) where your changes are implemented.
     * @param base The branch (or git ref) you want your changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repositoryName that requests a merge to a base of another repositoryName.
     */ 
    Observable<Map<String, Object>> createPullRequestFromIssue(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("issue") Number issue,
        @Required @Named("head") String head,
        @Required @Named("base") String base
    );

    /**
     * Delete a comment
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param number The number of the comment
     */ 
    Observable<Map<String, Object>> deletePullRequestComment(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number
    );

    /**
     * Edit a comment
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param number The number of the comment
     * @param body The text of the comment
     */ 
    Observable<Map<String, Object>> editPullRequestComment(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number,
        @Required @Named("body") String body
    );

    /**
     * Get a single pull request
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param number The number of the pull request
     */ 
    Observable<Map<String, Object>> getPullRequest(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number
    );

    /**
     * List pull requests
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param state Either open, closed, or all to filter by state. Default: open
     * @param head Filter pulls by head user and branch name in the format of user:ref-name. Example: github:new-script-format.
     * @param base Filter pulls by base branch name. Example: gh-pages.
     * @param sort Possible values are: `created`, `updated`, `popularity`, `long-running`, Default: `created`
     * @param direction The direction of the sort. Can be either asc or desc. Default: desc, when sort is created or sort is not specified, otherwise asc.
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getAllPullRequests(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("state") String state,
        @Named("head") String head,
        @Named("base") String base,
        @Named("sort") String sort,
        @Named("direction") String direction,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get a single comment
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param number The number of the comment
     */ 
    Observable<Map<String, Object>> getPullRequestComment(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number
    );

    /**
     * List comments on a pull request
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param number The number of the pull request
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getPullRequestComments(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List comments in a repository
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param sort Possible values are: `created`, `updated`, Default: `created`
     * @param direction Can be either asc or desc. Ignored without sort parameter.
     * @param since Only comments updated at or after this time are returned. Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getPullRequestCommentsForRepository(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("sort") String sort,
        @Named("direction") String direction,
        @Named("since") String since,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List commits on a pull request
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param number The number of the pull request
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getPullRequestCommits(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List pull requests files
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param number The number of the pull request
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getPullRequestFiles(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Merge a pull request (Merge Button)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param number The number of the pull request
     * @param commitTitle Title for the automatic commit message. (In preview period. See README.)
     * @param commitMessage Extra detail to append to automatic commit message.
     * @param sha SHA that pull request head must match to allow merge
     * @param mergeMethod Merge method to use. Possible values are `merge`, `squash`, or `rebase`. (In preview period. See README.)
     */ 
    Observable<Map<String, Object>> mergePullRequest(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number,
        @Named("commitTitle") String commitTitle,
        @Named("commitMessage") String commitMessage,
        @Named("sha") String sha,
        @Named("mergeMethod") String mergeMethod
    );

    /**
     * Update a pull request
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param number The number of the pull request
     * @param title The title of the pull request.
     * @param body The contents of the pull request.
     * @param state State of this Pull Request. Either open or closed.
     * @param base The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.
     */ 
    Observable<Map<String, Object>> updatePullRequest(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number,
        @Named("title") String title,
        @Named("body") String body,
        @Named("state") String state,
        @Named("base") String base
    );

    /**
     * Create reaction for a commit comment. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The comment ID
     * @param content The reaction type.
     */ 
    Observable<Map<String, Object>> createReactionForCommitComment(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id,
        @Required @Named("content") String content
    );

    /**
     * Create reaction for an issue. (In preview period. See README.)
     *
     * @param user Te owner name
     * @param repositoryName The name of the repository
     * @param number Tne number of the issue
     * @param content The reaction type.
     */ 
    Observable<Map<String, Object>> createReactionForIssue(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number,
        @Required @Named("content") String content
    );

    /**
     * Create reaction for an issue comment. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The comment ID
     * @param content The reaction type.
     */ 
    Observable<Map<String, Object>> createReactionForIssueComment(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id,
        @Required @Named("content") String content
    );

    /**
     * Create reaction for a pull request review comment. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The comment ID
     * @param content The reaction type.
     */ 
    Observable<Map<String, Object>> createReactionForPullRequestReviewComment(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id,
        @Required @Named("content") String content
    );

    /**
     * Delete a reaction. (In preview period. See README.)
     *
     * @param id The reaction ID
     */ 
    Observable<Map<String, Object>> deleteReaction(
        @Required @Named("id") String id
    );

    /**
     * List reactions for a commit comment. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The comment ID
     * @param content Indicates which type of reaction to return.
     */ 
    Observable<Map<String, Object>> getReactionForCommitComment(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id,
        @Named("content") String content
    );

    /**
     * List reactions for an issue. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param number The number of the issue
     * @param content Indicates which type of reaction to return.
     */ 
    Observable<Map<String, Object>> getReactionForIssue(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number,
        @Named("content") String content
    );

    /**
     * List reactions for an issue comment. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The comment ID
     * @param content Indicates which type of reaction to return.
     */ 
    Observable<Map<String, Object>> getReactionForIssueComment(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id,
        @Named("content") String content
    );

    /**
     * List reactions for a pull request review comment. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The comment ID
     * @param content Indicates which type of reaction to return.
     */ 
    Observable<Map<String, Object>> getReactionForPullRequestReviewComment(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id,
        @Named("content") String content
    );

    /**
     * Add user as a collaborator
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param collabuser The name of the collaborator
     * @param permission `pull` - can pull, but not push to or administer this repository, `push` - can pull and push, but not administer this repository, `admin` - can pull, push and administer this repository.
     */ 
    Observable<Map<String, Object>> addRepositoryCollaborator(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("collabuser") String collabuser,
        @Named("permission") String permission
    );

    /**
     * Add required status checks contexts of protected branch. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param branch The branch name
     * @param body An array of protected branch required status checks contexts (e.g. continuous-integration/jenkins).
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> addProtectedBranchRequiredStatusChecksContexts(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("branch") String branch,
        @Required @Named("body") String body,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Add team restrictions of protected branch. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param branch The name of the branch
     * @param body An array of team slugs (e.g. justice-league).
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> addProtectedBranchTeamRestrictions(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("branch") String branch,
        @Required @Named("body") String body,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Add user restrictions of protected branch. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param branch The name of the branch
     * @param body An array of team slugs (e.g. justice-league).
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> addProtectedBranchUserRestrictions(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("branch") String branch,
        @Required @Named("body") String body,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Check if user is a collaborator.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param collabuser The name of the collaborator
     */ 
    Observable<Map<String, Object>> checkRepositoryCollaborator(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("collabuser") String collabuser
    );

    /**
     * Compare two commits.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param base The branch (or git ref) you want your changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repositoryName that requests a merge to a base of another repositoryName.
     * @param head The branch (or git ref) where your changes are implemented.
     */ 
    Observable<Map<String, Object>> compareRepositoryCommits(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("base") String base,
        @Required @Named("head") String head
    );

    /**
     * Create a new repository for the authenticated user.
     *
     * @param name The name of the repository
     * @param description A short description of the repository
     * @param homepage A URL with more information about the repository
     * @param _private True to create a private repository, false to create a public one. Creating private repositories requires a paid GitHub account. Default is false.
     * @param hasIssues True to enable issues for this repository, false to disable them. Default is true.
     * @param hasWiki True to enable the wiki for this repository, false to disable it. Default is true.
     * @param hasDownloads True to enable downloads for this repository, false to disable them. Default is true.
     * @param teamId The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
     * @param autoInit True to create an initial commit with empty README. Default is false
     * @param gitignoreTemplate Desired language or platform .gitignore template to apply. Ignored if auto_init parameter is not provided.
     * @param licenseTemplate Desired LICENSE template to apply. Use the name of the template without the extension. For example, "mit" or "mozilla".
     * @param allowSquashMerge Either true to allow squash-merging pull requests, or false to prevent squash-merging. Default: true. (In preview period. See README.)
     * @param allowMergeCommit Either true to allow merging pull requests with a merge commit, or false to prevent merging pull requests with merge commits. Default: true. (In preview period. See README.)
     * @param allowRebaseMerge Either true to allow rebase-merging pull requests, or false to prevent rebase-merging. Default: true. (In preview period. See README.)
     */ 
    Observable<Map<String, Object>> createRepository(
        @Required @Named("name") String name,
        @Named("description") String description,
        @Named("homepage") String homepage,
        @Named("_private") String _private,
        @Named("hasIssues") String hasIssues,
        @Named("hasWiki") String hasWiki,
        @Named("hasDownloads") String hasDownloads,
        @Named("teamId") String teamId,
        @Named("autoInit") String autoInit,
        @Named("gitignoreTemplate") String gitignoreTemplate,
        @Named("licenseTemplate") String licenseTemplate,
        @Named("allowSquashMerge") String allowSquashMerge,
        @Named("allowMergeCommit") String allowMergeCommit,
        @Named("allowRebaseMerge") String allowRebaseMerge
    );

    /**
     * Create a commit comment.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param sha SHA1 hash of the commit
     * @param body The contents of the comment.
     * @param path Relative path of the file to comment on.
     * @param position Line index in the diff to comment on.
     */ 
    Observable<Map<String, Object>> createRepositoryCommitComment(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("sha") String sha,
        @Required @Named("body") String body,
        @Named("path") String path,
        @Named("position") Number position
    );

    /**
     * Create a deployment.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param ref The ref to deploy. This can be a branch, tag, or sha.
     * @param task The named task to execute. e.g. deploy or deploy:migrations. Default: deploy
     * @param autoMerge Optional parameter to merge the default branch into the requested ref if it is behind the default branch. Default: true
     * @param requiredContexts Optional array of status contexts verified against commit status checks. If this parameter is omitted from the parameters then all unique contexts will be verified before a deployment is created. To bypass checking entirely pass an empty array. Defaults to all unique contexts.
     * @param payload Optional JSON payload with extra information about the deployment. Default: ""
     * @param environment The name of the environment that was deployed to. e.g. staging or production. Default: none.
     * @param description Optional short description. Default: ""
     * @param transientEnvironment Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: false. (In preview period. See README.)
     * @param productionEnvironment Specifies if the given environment is a one that end-users directly interact with. Default: true when environment is `production` and false otherwise. (In preview period. See README.)
     */ 
    Observable<Map<String, Object>> createRepositoryDeployment(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("ref") String ref,
        @Named("task") String task,
        @Named("autoMerge") String autoMerge,
        @Named("requiredContexts") String requiredContexts,
        @Named("payload") String payload,
        @Named("environment") String environment,
        @Named("description") String description,
        @Named("transientEnvironment") String transientEnvironment,
        @Named("productionEnvironment") String productionEnvironment
    );

    /**
     * Create a deployment status.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The deployment ID
     * @param state The state of the status. Can be one of pending, success, error, or failure.
     * @param targetUrl The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. Default: ""
     * @param logUrl Functionally equivalent to target_url. Default: "". (In preview period. See README.)
     * @param description A short description of the status. Default: ""
     * @param environmentUrl URL for accessing the deployment environment. Default: "". (In preview period. See README.)
     * @param autoInactive When true the new `inactive` status is added to all other non-transient, non-production environment deployments with the same repository and environment name as the created status's deployment. Default: true. (In preview period. See README.)
     */ 
    Observable<Map<String, Object>> createRepositoryDeploymentStatus(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id,
        @Named("state") String state,
        @Named("targetUrl") String targetUrl,
        @Named("logUrl") String logUrl,
        @Named("description") String description,
        @Named("environmentUrl") String environmentUrl,
        @Named("autoInactive") String autoInactive
    );

    /**
     * Create a new file in the given repository.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param path The content path.
     * @param message The commit message.
     * @param content The new file content, Base64 encoded.
     * @param branch The branch name. If not provided, uses the repository’s default branch (usually master).
     * @param committer Object containing information about the committer. You must provide values for both name and email. Ex.: "committer": {"name": "Scott Chacon", "email": "schacon@gmail.com"}
     */ 
    Observable<Map<String, Object>> createRepositoryFile(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("path") String path,
        @Required @Named("message") String message,
        @Required @Named("content") String content,
        @Named("branch") String branch,
        @Named("committer") String committer
    );

    /**
     * Create a new repository for an organization.
     *
     * @param organizationName The name of the organization
     * @param name The name of the repository
     * @param description A short description of the repository
     * @param homepage A URL with more information about the repository
     * @param _private True to create a private repository, false to create a public one. Creating private repositories requires a paid GitHub account. Default is false.
     * @param hasIssues True to enable issues for this repository, false to disable them. Default is true.
     * @param hasWiki True to enable the wiki for this repository, false to disable it. Default is true.
     * @param hasDownloads True to enable downloads for this repository, false to disable them. Default is true.
     * @param teamId The id of the team that will be granted access to this repository. This is only valid when creating a repositoryName in an organization.
     * @param autoInit True to create an initial commit with empty README. Default is false
     * @param gitignoreTemplate Desired language or platform .gitignore template to apply. Ignored if auto_init parameter is not provided.
     * @param licenseTemplate Desired LICENSE template to apply. Use the name of the template without the extension. For example, "mit" or "mozilla".
     * @param allowSquashMerge Either true to allow squash-merging pull requests, or false to prevent squash-merging. Default: true. (In preview period. See README.)
     * @param allowMergeCommit Either true to allow merging pull requests with a merge commit, or false to prevent merging pull requests with merge commits. Default: true. (In preview period. See README.)
     * @param allowRebaseMerge Either true to allow rebase-merging pull requests, or false to prevent rebase-merging. Default: true. (In preview period. See README.)
     */ 
    Observable<Map<String, Object>> createRepositoryForOrganization(
        @Required @Named("organizationName") String organizationName,
        @Required @Named("name") String name,
        @Named("description") String description,
        @Named("homepage") String homepage,
        @Named("_private") String _private,
        @Named("hasIssues") String hasIssues,
        @Named("hasWiki") String hasWiki,
        @Named("hasDownloads") String hasDownloads,
        @Named("teamId") Number teamId,
        @Named("autoInit") String autoInit,
        @Named("gitignoreTemplate") String gitignoreTemplate,
        @Named("licenseTemplate") String licenseTemplate,
        @Named("allowSquashMerge") String allowSquashMerge,
        @Named("allowMergeCommit") String allowMergeCommit,
        @Named("allowRebaseMerge") String allowRebaseMerge
    );

    /**
     * Create a hook.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param name Use web for a webhook or use the name of a valid service.
     * @param config A Hash containing key/value pairs to provide settings for this hook. These settings vary between the services and are defined in the github-services repositoryName. Booleans are stored internally as `1` for true, and `0` for false. Any JSON true/false values will be converted automatically.
     * @param events Determines what events the hook is triggered for. Default: `['push']`.
     * @param active Determines whether the hook is actually triggered on pushes.
     */ 
    Observable<Map<String, Object>> createRepositoryHook(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("name") String name,
        @Required @Named("config") String config,
        @Named("events") String events,
        @Named("active") String active
    );

    /**
     * Add a new deploy key.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param title A name for the key.
     * @param key The contents of the key.
     * @param readOnly If true, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.
     */ 
    Observable<Map<String, Object>> createRepositoryKey(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("title") String title,
        @Required @Named("key") String key,
        @Named("readOnly") String readOnly
    );

    /**
     * Create a project.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param name The name of the project
     * @param body The body of the project
     */ 
    Observable<Map<String, Object>> createRepositoryProject(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("name") String name,
        @Required @Named("body") String body
    );

    /**
     * Create a project card.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The column ID
     * @param note The note of the card.
     * @param contentId The id of the Issue or Pull Request to associate with this card.
     * @param contentType The type of content to associate with this card. Can be either 'Issue' or 'PullRequest'.
     */ 
    Observable<Map<String, Object>> createRepositoryProjectCard(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id,
        @Named("note") String note,
        @Named("contentId") String contentId,
        @Named("contentType") String contentType
    );

    /**
     * Create a project column.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param number The number of the project
     * @param name The name of the column.
     */ 
    Observable<Map<String, Object>> createRepositoryProjectColumn(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number,
        @Required @Named("name") String name
    );

    /**
     * Create a release.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param tagName String of the tag
     * @param targetCommitish Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually master).
     * @param name The name of the release
     * @param body Text describing the contents of the tag.
     * @param draft true to create a draft (unpublished) release, false to create a published one. Default: false
     * @param prerelease true to identify the release as a prerelease. false to identify the release as a full release. Default: false
     */ 
    Observable<Map<String, Object>> createRepositoryRelease(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("tagName") String tagName,
        @Named("targetCommitish") String targetCommitish,
        @Named("name") String name,
        @Named("body") String body,
        @Named("draft") String draft,
        @Named("prerelease") String prerelease
    );

    /**
     * Create a status.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param sha SHA1 hash of the status
     * @param state State of the status - can be one of pending, success, error, or failure.
     * @param targetUrl Target url to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the ‘source’ of the Status.
     * @param description Short description of the status.
     * @param context A string label to differentiate this status from the status of other systems.
     */ 
    Observable<Map<String, Object>> createRepositoryStatus(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("sha") String sha,
        @Required @Named("state") String state,
        @Named("targetUrl") String targetUrl,
        @Named("description") String description,
        @Named("context") String context
    );

    /**
     * Delete a repository.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     */ 
    Observable<Map<String, Object>> deleteRepository(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName
    );

    /**
     * Delete a release asset.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The asset ID
     */ 
    Observable<Map<String, Object>> deleteRepositoryAsset(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id
    );

    /**
     * Delete a commit comment.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The comment ID
     */ 
    Observable<Map<String, Object>> deleteRepositoryCommitComment(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id
    );

    /**
     * Delete a download.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The download ID
     */ 
    Observable<Map<String, Object>> deleteRepositoryDownload(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id
    );

    /**
     * Delete a file.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param path The content path.
     * @param message The commit message.
     * @param sha The blob SHA of the file being removed.
     * @param branch The branch name. If not provided, uses the repository’s default branch (usually master).
     * @param committer Object containing information about the committer. You must provide values for both name and email. Ex.: "committer": {"name": "Scott Chacon", "email": "schacon@gmail.com"} 
     */ 
    Observable<Map<String, Object>> deleteRepositoryFile(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("path") String path,
        @Required @Named("message") String message,
        @Required @Named("sha") String sha,
        @Named("branch") String branch,
        @Named("committer") String committer
    );

    /**
     * Deleate a hook.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The hook ID
     */ 
    Observable<Map<String, Object>> deleteRepositoryHook(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id
    );

    /**
     * Delete a repository invitation. (In preview period. See README.)
     *
     * @param repositoryName The name of the repository
     * @param id The invitation ID
     */ 
    Observable<Map<String, Object>> deleteRepositoryInvite(
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id
    );

    /**
     * Remove a deploy key.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The key ID
     */ 
    Observable<Map<String, Object>> deleteRepositoryKey(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id
    );

    /**
     * Delete a project.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param number The number of the project
     */ 
    Observable<Map<String, Object>> deleteRepositoryProject(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number
    );

    /**
     * Delete a project card.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The card ID
     */ 
    Observable<Map<String, Object>> deleteRepositoryProjectCard(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id
    );

    /**
     * Delete a project column.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The column ID
     */ 
    Observable<Map<String, Object>> deleteRepositoryProjectColumn(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id
    );

    /**
     * Delete a release
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The release ID
     */ 
    Observable<Map<String, Object>> deleteRepositoryRelease(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id
    );

    /**
     * Update a repo.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param name The name of the repository
     * @param description A short description of the repository
     * @param homepage A URL with more information about the repository
     * @param _private True to create a private repository, false to create a public one. Creating private repositories requires a paid GitHub account. Default is false.
     * @param hasIssues True to enable issues for this repository, false to disable them. Default is true.
     * @param hasWiki True to enable the wiki for this repository, false to disable it. Default is true.
     * @param hasDownloads True to enable downloads for this repository, false to disable them. Default is true.
     * @param defaultBranch Updates the default branch for this repository.
     * @param allowSquashMerge Either true to allow squash-merging pull requests, or false to prevent squash-merging. Default: true. (In preview period. See README.)
     * @param allowMergeCommit Either true to allow merging pull requests with a merge commit, or false to prevent merging pull requests with merge commits. Default: true. (In preview period. See README.)
     * @param allowRebaseMerge Either true to allow rebase-merging pull requests, or false to prevent rebase-merging. Default: true. (In preview period. See README.)
     */ 
    Observable<Map<String, Object>> editRepository(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("name") String name,
        @Named("description") String description,
        @Named("homepage") String homepage,
        @Named("_private") String _private,
        @Named("hasIssues") String hasIssues,
        @Named("hasWiki") String hasWiki,
        @Named("hasDownloads") String hasDownloads,
        @Named("defaultBranch") String defaultBranch,
        @Named("allowSquashMerge") String allowSquashMerge,
        @Named("allowMergeCommit") String allowMergeCommit,
        @Named("allowRebaseMerge") String allowRebaseMerge
    );

    /**
     * Edit a release asset.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The asset ID
     * @param name The file name of the asset
     * @param label An alternate short description of the asset. Used in place of the filename.
     */ 
    Observable<Map<String, Object>> editRepositoryAsset(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id,
        @Required @Named("name") String name,
        @Named("label") String label
    );

    /**
     * Edit a hook.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The hook ID
     * @param config A Hash containing key/value pairs to provide settings for this hook. Modifying this will replace the entire config object. These settings vary between the services and are defined in the github-services repositoryName. Booleans are stored internally as `1` for true, and `0` for false. Any JSON true/false values will be converted automatically.
     * @param events Determines what events the hook is triggered for. This replaces the entire array of events. Default: `['push']`.
     * @param addEvents Determines a list of events to be added to the list of events that the Hook triggers for.
     * @param removeEvents Determines a list of events to be removed from the list of events that the Hook triggers for.
     * @param active Determines whether the hook is actually triggered on pushes.
     */ 
    Observable<Map<String, Object>> editRepositoryHook(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id,
        @Required @Named("config") String config,
        @Named("events") String events,
        @Named("addEvents") String addEvents,
        @Named("removeEvents") String removeEvents,
        @Named("active") String active
    );

    /**
     * Edit a release.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The release ID
     * @param tagName String of the tag
     * @param targetCommitish Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually master).
     * @param name The name of the release.
     * @param body Text describing the contents of the tag.
     * @param draft true to create a draft (unpublished) release, false to create a published one. Default: false
     * @param prerelease true to identify the release as a prerelease. false to identify the release as a full release. Default: false
     */ 
    Observable<Map<String, Object>> editRepositoryRelease(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id,
        @Required @Named("tagName") String tagName,
        @Named("targetCommitish") String targetCommitish,
        @Named("name") String name,
        @Named("body") String body,
        @Named("draft") String draft,
        @Named("prerelease") String prerelease
    );

    /**
     * Create a fork.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param organization Optional parameter to specify the organization name if forking into an organization.
     */ 
    Observable<Map<String, Object>> forkRepository(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("organization") String organization
    );

    /**
     * Get a repo for a user.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     */ 
    Observable<Map<String, Object>> getRepository(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName
    );

    /**
     * List your repositories
     *
     * @param visibility Can be one of `all`, `public`, or `private`. Default: `all`.
     * @param affiliation Comma-separated list of values. Can include: `owner`, `collaborator`, `organization_member`.
     * @param type Possible values: `all`, `owner`, `public`, `private`, `member`. Default: `all`.
     * @param sort Possible values: `created`, `updated`, `pushed`, `full_name`. Default: `full_name`.
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getAllRepositories(
        @Named("visibility") String visibility,
        @Named("affiliation") String affiliation,
        @Named("type") String type,
        @Named("sort") String sort,
        @Named("direction") String direction,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List commit comments for a repository.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryAllCommitComments(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get archive link.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param archiveFormat Either tarball or zipball, Deafult: tarball.
     * @param ref String of the name of the fully qualified reference (ie: heads/master). If it doesn’t have at least one slash, it will be rejected.
     */ 
    Observable<Map<String, Object>> getRepositoryArchiveLink(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("archiveFormat") String archiveFormat,
        @Named("ref") String ref
    );

    /**
     * Get a single release asset.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The assetID
     */ 
    Observable<Map<String, Object>> getRepositoryAsset(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id
    );

    /**
     * Get branch. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param branch The name of the branch
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryBranch(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("branch") String branch,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get branch protection. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param branch The name of the branch
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryBranchProtection(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("branch") String branch,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List branches. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param _protected Set to true to only return protected branches
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryBranches(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("_protected") String _protected,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get a single repo by id.
     *
     * @param id The repository ID
     */ 
    Observable<Map<String, Object>> getRepositoryById(
        @Required @Named("id") String id
    );

    /**
     * Get the total number of clones and breakdown per day or week for the last 14 days.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryClones(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List collaborators
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryCollaborators(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get the combined status for a specific ref.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param sha Ref to fetch the status for. It can be a SHA, a branch name, or a tag name.
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryCombinedStatus(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("sha") String sha,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get a single commit.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param sha SHA1 hash of the commit
     */ 
    Observable<Map<String, Object>> getRepositoryCommit(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("sha") String sha
    );

    /**
     * Get a single commit comment.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The comment ID
     */ 
    Observable<Map<String, Object>> getRepositoryCommitComment(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id
    );

    /**
     * List comments for a single commit.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param sha SHA1 hash of the commit
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryCommitComments(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("sha") String sha,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List commits on a repository.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param sha Sha or branch to start listing commits from.
     * @param path Only commits containing this file path will be returned.
     * @param author GitHub login or email address by which to filter by commit author.
     * @param since Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
     * @param until Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryCommits(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("sha") String sha,
        @Named("path") String path,
        @Named("author") String author,
        @Named("since") String since,
        @Named("until") String until,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get the contents of a file or directory in a repository.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param path The content path.
     * @param ref The String name of the Commit/Branch/Tag. Defaults to master.
     */ 
    Observable<Map<String, Object>> getRepositoryContent(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("path") String path,
        @Named("ref") String ref
    );

    /**
     * Get contributors for the specified repository.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param anon Set to 1 or true to include anonymous contributors in results.
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryContributors(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("anon") String anon,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List deployment statuses.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The deployment ID
     */ 
    Observable<Map<String, Object>> getRepositoryDeploymentStatuses(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id
    );

    /**
     * List deployments.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param sha The short or long sha that was recorded at creation time. Default: none.
     * @param ref The name of the ref. This can be a branch, tag, or sha. Default: none.
     * @param task The name of the task for the deployment. e.g. deploy or deploy:migrations. Default: none.
     * @param environment The name of the environment that was deployed to. e.g. staging or production. Default: none.
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryDeployments(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("sha") String sha,
        @Named("ref") String ref,
        @Named("task") String task,
        @Named("environment") String environment,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get a single download.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The download ID
     */ 
    Observable<Map<String, Object>> getRepositoryDownload(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id
    );

    /**
     * List downloads for repository.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryDownloads(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List repositories for the specified org.
     *
     * @param organizationName The name of the organization
     * @param type Possible values: `all`, `public`, `private`, `forks`, `sources`, `member`. Default: `all`.
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<List<Map<String, Object>>> getOrganizationRepositories(
        @Required @Named("organizationName") String organizationName,
        @Named("type") String type,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List public repositories for the specified user.
     *
     * @param user The user name
     * @param type Possible values: `all`, `owner`, `member`. Default: `owner`.
     * @param sort Possible values: `created`, `updated`, `pushed`, `full_name`. Default: `full_name`.
     * @param direction Can be one of asc or desc. Default: when using full_name: asc, otherwise desc
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getUserRepositories(
        @Required @Named("user") String user,
        @Named("type") String type,
        @Named("sort") String sort,
        @Named("direction") String direction,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List forks.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param sort Possible values: `newest`, `oldest`, `stargazers`, default: `newest`.
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryForks(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("sort") String sort,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get single hook.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The hook ID
     */ 
    Observable<Map<String, Object>> getRepositoryHook(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id
    );

    /**
     * List hooks.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryHooks(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List a user's repository invitations. (In preview period. See README.)
     *
     * @param repositoryName The name of the repository
     */ 
    Observable<Map<String, Object>> getRepositoryInvites(
        @Required @Named("repositoryName") String repositoryName
    );

    /**
     * Get a deploy key.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The key ID
     */ 
    Observable<Map<String, Object>> getRepositoryKey(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id
    );

    /**
     * List deploy keys.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryKeys(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get languages for the specified repository.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryLanguages(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get latest Pages build
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     */ 
    Observable<Map<String, Object>> getRepositoryLatestPagesBuild(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName
    );

    /**
     * Get the latest release.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     */ 
    Observable<Map<String, Object>> getRepositoryLatestRelease(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName
    );

    /**
     * Get information about a Pages site. (Use preview header to include additional info.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryPages(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get a specific Pages build
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The build ID
     */ 
    Observable<Map<String, Object>> getRepositoryPagesBuild(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id
    );

    /**
     * List Pages builds
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryPagesBuilds(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get the top 10 popular contents over the last 14 days.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryPaths(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List a project.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param number The number of the project
     */ 
    Observable<Map<String, Object>> getRepositoryProject(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number
    );

    /**
     * Get project card.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The card ID
     */ 
    Observable<Map<String, Object>> getRepositoryProjectCard(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id
    );

    /**
     * List project cards.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The column ID
     */ 
    Observable<Map<String, Object>> getRepositoryProjectCards(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id
    );

    /**
     * Get a project column.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The column ID
     */ 
    Observable<Map<String, Object>> getRepositoryProjectColumn(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id
    );

    /**
     * List a project's columns.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param number The number of the project
     */ 
    Observable<Map<String, Object>> getRepositoryProjectColumns(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number
    );

    /**
     * List projects.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     */ 
    Observable<Map<String, Object>> getRepositoryProjects(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName
    );

    /**
     * Get required status checks of protected branch. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param branch The name of the branch
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getProtectedBranchRequiredStatusChecks(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("branch") String branch,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List required status checks contexts of protected branch. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param branch The name of the branch
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getProtectedBranchRequiredStatusChecksContexts(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("branch") String branch,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get restrictions of protected branch. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param branch The name of the branch
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getProtectedBranchRestrictions(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("branch") String branch,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List team restrictions of protected branch. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param branch The name of the branch
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getProtectedBranchTeamRestrictions(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("branch") String branch,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List user restrictions of protected branch. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param branch The name of the branch
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getProtectedBranchUserRestrictions(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("branch") String branch,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List all public repositories
     *
     * @param since The integer ID of the last Repository that you've seen.
     */ 
    Observable<Map<String, Object>> getPublicRepositories(
        @Named("since") String since
    );

    /**
     * Get the README for the given repository.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param ref The name of the commit/branch/tag. Default: the repository’s default branch (usually master)
     */ 
    Observable<Map<String, Object>> getRepositoryReadme(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("ref") String ref
    );

    /**
     * Get the top 10 referrers over the last 14 days.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryReferrers(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get a single release.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The release ID
     */ 
    Observable<Map<String, Object>> getRepositoryRelease(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id
    );

    /**
     * Get a release by tag name.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param tag String of the tag
     */ 
    Observable<Map<String, Object>> getRepositoryReleaseByTag(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("tag") String tag
    );

    /**
     * List releases for a repository.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryReleases(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get the SHA-1 of a commit reference.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param ref String of the name of the fully qualified reference (ie: heads/master). If it doesn’t have at least one slash, it will be rejected.
     */ 
    Observable<Map<String, Object>> getRepositoryShaOfCommitRef(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("ref") String ref
    );

    /**
     * Get the number of additions and deletions per week.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     */ 
    Observable<Map<String, Object>> getRepositoryStatsCodeFrequency(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName
    );

    /**
     * Get the last year of commit activity data.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     */ 
    Observable<Map<String, Object>> getRepositoryStatsCommitActivity(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName
    );

    /**
     * Get contributors list with additions, deletions, and commit counts.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     */ 
    Observable<Map<String, Object>> getRepositoryStatsContributors(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName
    );

    /**
     * Get the weekly commit count for the repository owner and everyone else.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     */ 
    Observable<Map<String, Object>> getRepositoryStatsParticipation(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName
    );

    /**
     * Get the number of commits per hour in each day.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     */ 
    Observable<Map<String, Object>> getRepositoryStatsPunchCard(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName
    );

    /**
     * Get status for a specfic ref.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param sha SHA hash of the commit
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryStatuses(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("sha") String sha,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get tags for the specified repository.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryTags(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get teams for the specified repository.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryTeams(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get the total number of views and breakdown per day or week for the last 14 days.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getRepositoryViews(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List assets for a release.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The release ID
     */ 
    Observable<Map<String, Object>> getRepositoryAssets(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id
    );

    /**
     * Perform a merge.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param base The branch (or git ref) you want your changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repositoryName that requests a merge to a base of another repositoryName.
     * @param head The branch (or git ref) where your changes are implemented.
     * @param commitMessage Commit message to use for the merge commit. If omitted, a default message will be used.
     */ 
    Observable<Map<String, Object>> mergeRepository(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("base") String base,
        @Required @Named("head") String head,
        @Named("commitMessage") String commitMessage
    );

    /**
     * Move a project card.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The card ID
     * @param position Can be one of first, last, or after:, where is the id value of a column in the same project.
     * @param columnId The id value of a column in the same project.
     */ 
    Observable<Map<String, Object>> moveRepositoryProjectCard(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id,
        @Required @Named("position") String position,
        @Named("columnId") String columnId
    );

    /**
     * Move a project column.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The column ID
     * @param position Can be one of first, last, or after:, where is the id value of a column in the same project.
     */ 
    Observable<Map<String, Object>> moveRepositoryProjectColumn(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id,
        @Required @Named("position") String position
    );

    /**
     * Ping a hook.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The hook ID
     */ 
    Observable<Map<String, Object>> pingRepositoryHook(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id
    );

    /**
     * Remove branch protection. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param branch The name of the branch
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> removeBranchProtection(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("branch") String branch,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Remove user as a collaborator.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param collabuser The name of the collaborator
     */ 
    Observable<Map<String, Object>> removeRepositoryCollaborator(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("collabuser") String collabuser
    );

    /**
     * Remove required status checks of protected branch. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param branch The name of the branch
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> removeProtectedBranchRequiredStatusChecks(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("branch") String branch,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Remove required status checks contexts of protected branch. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param branch The name of the branch
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> removeProtectedBranchRequiredStatusChecksContexts(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("branch") String branch,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Remove restrictions of protected branch. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param branch The name of the branch
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> removeProtectedBranchRestrictions(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("branch") String branch,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Remove team restrictions of protected branch. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param branch The name of the branch
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> removeProtectedBranchTeamRestrictions(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("branch") String branch,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Remove user restrictions of protected branch. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param branch The name of the branch
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> removeProtectedBranchUserRestrictions(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("branch") String branch,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Replace required status checks contexts of protected branch. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param branch The name of the branch
     * @param body An array of protected branch required status checks contexts (e.g. continuous-integration/jenkins).
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> replaceProtectedBranchRequiredStatusChecksContexts(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("branch") String branch,
        @Required @Named("body") String body,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Replace team restrictions of protected branch. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param branch The name of the branch
     * @param body An array of team slugs (e.g. justice-league).
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> replaceProtectedBranchTeamRestrictions(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("branch") String branch,
        @Required @Named("body") String body,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Replace user restrictions of protected branch. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param branch The name of the branch
     * @param body An array of team slugs (e.g. justice-league).
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> replaceProtectedBranchUserRestrictions(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("branch") String branch,
        @Required @Named("body") String body,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Request a page build. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     */ 
    Observable<Map<String, Object>> requestRepositoryPageBuild(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName
    );

    /**
     * Test a [push] hook.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The hook ID
     */ 
    Observable<Map<String, Object>> testRepositoryHook(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id
    );

    /**
     * Update branch protection. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param branch The name of the branch
     * @param requiredStatusChecks JSON object that contains the following keys: `include_admins` - Enforce required status checks for repository administrators, `strict` - Require branches to be up to date before merging, `contexts` - The list of status checks to require in order to merge into this branch. This object can have the value of `null` for disabled.
     * @param restrictions JSON object that contains the following keys: `users` - The list of user logins with push access, `teams` - The list of team slugs with push access. This object can have the value of `null` for disabled.
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> updateRepositoryBranchProtection(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("branch") String branch,
        @Required @Named("requiredStatusChecks") String requiredStatusChecks,
        @Required @Named("restrictions") String restrictions,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Update a commit comment.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The comment ID
     * @param body The contents of the comment
     */ 
    Observable<Map<String, Object>> updateRepositoryCommitComment(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id,
        @Required @Named("body") String body
    );

    /**
     * Update a file.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param path The content path.
     * @param message The commit message.
     * @param content The updated file content, Base64 encoded.
     * @param sha The blob SHA of the file being replaced.
     * @param branch The branch name. If not provided, uses the repository’s default branch (usually master).
     * @param committer Object containing information about the committer. You must provide values for both name and email. Ex.: "committer": {"name": "Scott Chacon", "email": "schacon@gmail.com"} 
     */ 
    Observable<Map<String, Object>> updateRepositoryFile(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("path") String path,
        @Required @Named("message") String message,
        @Required @Named("content") String content,
        @Required @Named("sha") String sha,
        @Named("branch") String branch,
        @Named("committer") String committer
    );

    /**
     * Update a repository invitation. (In preview period. See README.)
     *
     * @param repositoryName The name of the repository
     * @param id The invitation ID
     * @param permission The permissions that the associated user will have on the repository.
     */ 
    Observable<Map<String, Object>> updateRepositoryInvite(
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id,
        @Named("permission") String permission
    );

    /**
     * Update a project.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param number The number of the project
     * @param name The name of the project
     * @param body The body of the project
     */ 
    Observable<Map<String, Object>> updateRepositoryProject(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("number") Number number,
        @Required @Named("name") String name,
        @Required @Named("body") String body
    );

    /**
     * Update a project card.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The card ID
     * @param note The note of the card.
     */ 
    Observable<Map<String, Object>> updateRepositoryProjectCard(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id,
        @Named("note") String note
    );

    /**
     * Update a project column.
     *
     * @param user The owner name
     * @param repositoryName The name of the repository
     * @param id The column ID
     * @param name The new name of the column
     */ 
    Observable<Map<String, Object>> updateRepositoryProjectColumn(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id,
        @Required @Named("name") String name
    );

    /**
     * Update required status checks of protected branch. (In preview period. See README.)
     *
     * @param user The owner name
     * @param repositoryName The new name of the column
     * @param branch The branch name
     * @param body JSON object that contains the following keys: `include_admins` - Enforce required status checks for repository administrators, `strict` - Require branches to be up to date before merging, `contexts` - The list of status checks to require in order to merge into this branch.
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> updateProtectedBranchRequiredStatusChecks(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("branch") String branch,
        @Required @Named("body") String body,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Upload a release asset.
     *
     * @param user The owner name
     * @param repositoryName The new name of the repository
     * @param id The release ID
     * @param filepath The file path of the asset.
     * @param name The file name of the asset. This should be set in a URI query parameter.
     * @param label An alternate short description of the asset. Used in place of the filename. This should be set in a URI query parameter.
     */ 
    Observable<Map<String, Object>> uploadRepositoryAsset(
        @Required @Named("user") String user,
        @Required @Named("repositoryName") String repositoryName,
        @Required @Named("id") String id,
        @Required @Named("filepath") String filepath,
        @Required @Named("name") String name,
        @Named("label") String label
    );

    /**
     * Search code.
     *
     * @param q Search Term
     * @param sort The sort field. Can only be indexed, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: results are sorted by best match.
     * @param order asc or desc
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> codeSearch(
        @Required @Named("q") String q,
        @Named("sort") String sort,
        @Named("order") String order,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Search against public email addresses.
     *
     * @param email The email address
     */ 
    Observable<Map<String, Object>> emailSearch(
        @Required @Named("email") String email
    );

    /**
     * Search issues.
     *
     * @param q Search Term
     * @param sort The sort field. Can be comments, created, or updated. Default: results are sorted by best match.
     * @param order asc or desc
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> issuesSearch(
        @Required @Named("q") String q,
        @Named("sort") String sort,
        @Named("order") String order,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Search repositories.
     *
     * @param q Search Term
     * @param sort stars, forks, or updated
     * @param order asc or desc
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> repositorySearch(
        @Required @Named("q") String q,
        @Named("sort") String sort,
        @Named("order") String order,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Search users.
     *
     * @param q Search Term
     * @param sort The sort field. Can be followers, repositories, or joined. Default: results are sorted by best match.
     * @param order asc or desc
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> usersSearch(
        @Required @Named("q") String q,
        @Named("sort") String sort,
        @Named("order") String order,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Accept a repository invitation. (In preview period. See README.)
     *
     * @param id The invitation ID
     */ 
    Observable<Map<String, Object>> acceptRepositoryInvite(
        @Required @Named("id") String id
    );

    /**
     * Add email address(es)
     *
     * @param body You can post a single email address or an array of addresses.
     */ 
    Observable<Map<String, Object>> addEmails(
        @Required @Named("body") String body
    );

    /**
     * Check if you are following a user
     *
     * @param user The user name
     */ 
    Observable<Map<String, Object>> checkFollowing(
        @Required @Named("user") String user
    );

    /**
     * Check if one user follows another
     *
     * @param user The user name
     * @param otherUser Other user name
     */ 
    Observable<Map<String, Object>> checkIfOneFollowersOther(
        @Required @Named("user") String user,
        @Required @Named("otherUser") String otherUser
    );

    /**
     * Create a GPG key. (In preview period. See README.)
     *
     * @param armoredPublicKey GPG key contents
     */ 
    Observable<Map<String, Object>> createGpgKey(
        @Required @Named("armoredPublicKey") String armoredPublicKey
    );

    /**
     * Create a public key
     *
     * @param title The key title
     * @param key The SSH key
     */ 
    Observable<Map<String, Object>> createKey(
        @Required @Named("title") String title,
        @Required @Named("key") String key
    );

    /**
     * Decline a repository invitation. (In preview period. See README.)
     *
     * @param id The invitation ID
     */ 
    Observable<Map<String, Object>> declineRepositoryInvite(
        @Required @Named("id") String id
    );

    /**
     * Delete email address(es)
     *
     * @param body You can post a single email address or an array of addresses.
     */ 
    Observable<Map<String, Object>> deleteEmails(
        @Required @Named("body") String body
    );

    /**
     * Delete a GPG key. (In preview period. See README.)
     *
     * @param id The GPG key ID
     */ 
    Observable<Map<String, Object>> deleteGpgKey(
        @Required @Named("id") String id
    );

    /**
     * Delete a public key
     *
     * @param id The key ID
     */ 
    Observable<Map<String, Object>> deleteKey(
        @Required @Named("id") String id
    );

    /**
     * Demote a site administrator to an ordinary user
     *
     * @param user The user name
     */ 
    Observable<Map<String, Object>> demoteUser(
        @Required @Named("user") String user
    );

    /**
     * Edit your organization membership
     *
     * @param organizationName The new name of the organization
     * @param state The state that the membership should be in. Only "active" will be accepted.
     */ 
    Observable<Map<String, Object>> editOrganizationMembership(
        @Required @Named("organizationName") String organizationName,
        @Required @Named("state") String state
    );

    /**
     * Follow a user
     *
     * @param user The user name
     */ 
    Observable<Map<String, Object>> followUser(
        @Required @Named("user") String user
    );

    /**
     * Get the authenticated user
     *
     */ 
    Observable<Map<String, Object>> getUser();

    /**
     * Get all users
     *
     * @param since The integer ID of the last User that you’ve seen.
     */ 
    Observable<Map<String, Object>> getAllUsers(
        @Named("since") Number since
    );

    /**
     * Get a single user by GitHub ID
     *
     * @param id The GitHub user ID
     */ 
    Observable<Map<String, Object>> getUserById(
        @Required @Named("id") String id
    );

    /**
     * List email addresses for a user
     *
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getUserEmails(
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List the authenticated user's followers
     *
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getUserFollowers(
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List a user's followers
     *
     * @param user The user name
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getFollowersForUser(
        @Required @Named("user") String user,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List who the authenticated user is following
     *
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getUserFollowing(
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List who a user is following
     *
     * @param user The user name
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getFollowingForUser(
        @Required @Named("user") String user,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get a single user
     *
     * @param user The user name
     */ 
    Observable<Map<String, Object>> getSingleUser(
        @Required @Named("user") String user
    );

    /**
     * Get a single GPG key. (In preview period. See README.)
     *
     * @param id The GPG key ID
     */ 
    Observable<Map<String, Object>> getGpgKey(
        @Required @Named("id") String id
    );

    /**
     * List your GPG keys. (In preview period. See README.)
     *
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getGpgKeys(
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get a single public key
     *
     * @param id The key ID
     */ 
    Observable<Map<String, Object>> getKey(
        @Required @Named("id") String id
    );

    /**
     * List your public keys
     *
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getKeys(
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List public keys for a user
     *
     * @param user The user name
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getKeysForUser(
        @Required @Named("user") String user,
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Get your organization membership
     *
     * @param organizationName The name of the organization
     */ 
    Observable<Map<String, Object>> getUserOrganizationMembership(
        @Required @Named("organizationName") String organizationName
    );

    /**
     * List organizations for the authenticated user.
     *
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getUserOrganizations(
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * List a user's repository invitations. (In preview period. See README.)
     *
     */ 
    Observable<Map<String, Object>> getRepositoryInvites();

    /**
     * Get your teams
     *
     * @param page Page number of the results to fetch.
     * @param perPage A custom page size up to 100. Default is 30.
     */ 
    Observable<Map<String, Object>> getUserTeams(
        @Named("page") Number page,
        @Named("perPage") Number perPage
    );

    /**
     * Promote an ordinary user to a site administrator
     *
     * @param user The user name
     */ 
    Observable<Map<String, Object>> promoteUser(
        @Required @Named("user") String user
    );

    /**
     * Suspend a user
     *
     * @param user The user name
     */ 
    Observable<Map<String, Object>> suspendUser(
        @Required @Named("user") String user
    );

    /**
     * @param user The user name
     */ 
    Observable<Map<String, Object>> unfollowUserUser(
        @Required @Named("user") String user
    );

    /**
     * Unsuspend a user
     *
     * @param user The user name
     */ 
    Observable<Map<String, Object>> unsuspendUser(
        @Required @Named("user") String user
    );

    /**
     * Update the authenticated user
     *
     * @param name The new name of the user
     * @param email Publicly visible email address.
     * @param blog The new blog URL of the user.
     * @param company The new company of the user.
     * @param location The new location of the user.
     * @param hireable The new hiring availability of the user.
     * @param bio The new short biography of the user.
     */ 
    Observable<Map<String, Object>> updateUser(
        @Named("name") String name,
        @Named("email") String email,
        @Named("blog") String blog,
        @Named("company") String company,
        @Named("location") String location,
        @Named("hireable") String hireable,
        @Named("bio") String bio
    );
}
