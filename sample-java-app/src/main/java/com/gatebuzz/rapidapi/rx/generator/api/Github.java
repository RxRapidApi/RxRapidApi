package com.gatebuzz.rapidapi.rx.generator.api;

import com.gatebuzz.rapidapi.rx.ApiPackage;
import com.gatebuzz.rapidapi.rx.DefaultParameters;
import com.gatebuzz.rapidapi.rx.Named;
import com.gatebuzz.rapidapi.rx.Required;
import rx.Observable;

import java.util.Map;

/*
 * Github
 *   - Github Package
 *   - An object oriented wrapper for the GitHub v3 API.
 *   - See: https://github.com/RapidSoftwareSolutions/Marketplace-Github-Package
 *
 * Generated by com.gatebuzz.rapidapi.rx.generator.RxRapidApiCodeGenerator
 * Generated on Fri Feb 17 15:32:21 CST 2017
 */
@SuppressWarnings("unused")
@ApiPackage("Github")
@DefaultParameters("accessToken")
public interface Github {
    // Check to see if the current user is subscribed to a thread.
    Observable<Map<String, Object>> checkNotificationThreadSubscription(
            @Required @Named("id") String id
    );

    // Check if you are starring a repository
    Observable<Map<String, Object>> checkRepositoryStarring(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Delete a notification thread subscription.
    Observable<Map<String, Object>> deleteNotificationThreadSubscription(
            @Required @Named("id") String id
    );

    // List public events
    Observable<Map<String, Object>> getPublicEvents(
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List public events for an organization
    Observable<Map<String, Object>> getOrganizationEvents(
            @Required @Named("organizationName") String organizationName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List repository events
    Observable<Map<String, Object>> getRepositoryEvents(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List issue events for a repository
    Observable<Map<String, Object>> getRepositoryIssuesEvents(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List public events for a network of repositories
    Observable<Map<String, Object>> getRepositoryNetworkEvents(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List events performed by a user
    Observable<Map<String, Object>> getUserPerformedEvents(
            @Required @Named("user") String user,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List events for a user's organization
    Observable<Map<String, Object>> getUserOrganizationEvents(
            @Required @Named("user") String user,
            @Required @Named("organizationName") String organizationName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List public events performed by a user
    Observable<Map<String, Object>> getUserPublicPerformedEvents(
            @Required @Named("user") String user,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List events that a user has received
    Observable<Map<String, Object>> getUserReceivedEvents(
            @Required @Named("user") String user,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List public events that a user has received
    Observable<Map<String, Object>> getUserReceivedPublicEvents(
            @Required @Named("user") String user,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get all feeds available for the authenticated user.
    Observable<Map<String, Object>> getFeeds();

    // View a single notification thread.
    Observable<Map<String, Object>> getNotificationThread(
            @Required @Named("id") String id
    );

    // Get all notifications for the current user, grouped by repository.
    Observable<Map<String, Object>> getUserNotifications(
            @Named("all") String all,
            @Named("participating") String participating,
            @Named("since") String since,
            @Named("before") String before
    );

    // Get all notifications for the given user.
    Observable<Map<String, Object>> getUserRepositoryNotifications(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("all") String all,
            @Named("participating") String participating,
            @Named("since") String since,
            @Named("before") String before
    );

    // Get a Repository Subscription.
    Observable<Map<String, Object>> getRepositorySubscription(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List Stargazers
    Observable<Map<String, Object>> getRepositoryStargazers(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List repositories being starred by the authenticated user
    Observable<Map<String, Object>> getStarredRepositories(
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List repositories being starred by a user
    Observable<Map<String, Object>> getUserStarredRepositories(
            @Required @Named("user") String user,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List repositories being watched by the authenticated user.
    Observable<Map<String, Object>> getWatchedRepositories(
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List repositories being watched by a user.
    Observable<Map<String, Object>> getUserWatchedRepositories(
            @Required @Named("user") String user,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get watchers for repository.
    Observable<Map<String, Object>> getRepositoryWatchers(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Mark a notification thread as read.
    Observable<Map<String, Object>> markNotificationThreadAsRead(
            @Required @Named("id") String id
    );

    // Mark notifications as read for authenticated user.
    Observable<Map<String, Object>> markNotificationsAsRead(
            @Named("lastReadAt") String lastReadAt
    );

    // Mark notifications in a repo as read.
    Observable<Map<String, Object>> markNotificationsAsReadForRepository(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("lastReadAt") String lastReadAt
    );

    // This lets you subscribe or unsubscribe from a conversation. Unsubscribing from a conversation mutes all future notifications (until you comment or get @mentioned once more).
    Observable<Map<String, Object>> setNotificationThreadSubscription(
            @Required @Named("id") String id,
            @Named("subscribed") String subscribed,
            @Named("ignored") String ignored
    );

    // Set a Repository Subscription
    Observable<Map<String, Object>> setRepositorySubscription(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("subscribed") String subscribed,
            @Named("ignored") String ignored
    );

    // Star a repository
    Observable<Map<String, Object>> starRepository(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName
    );

    // Unstar a repository
    Observable<Map<String, Object>> unstarRepository(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName
    );

    // Unwatch a repository.
    Observable<Map<String, Object>> unwatchRepository(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName
    );

    // Check an authorization
    Observable<Map<String, Object>> checkAuthorization(
            @Required @Named("token") String token,
            @Required @Named("clientId") String clientId,
            @Required @Named("clientSecret") String clientSecret
    );

    // Create a new authorization
    Observable<Map<String, Object>> createAuthorization(
            @Named("scopes") String scopes,
            @Named("note") String note,
            @Named("noteUrl") String noteUrl,
            @Required @Named("clientId") String clientId,
            @Named("clientSecret") String clientSecret,
            @Named("fingerprint") String fingerprint
    );

    // Delete an authorization
    Observable<Map<String, Object>> deleteAuthorization(
            @Required @Named("username") String username,
            @Required @Named("password") String password,
            @Required @Named("id") String id
    );

    // Delete a grant. (In preview period. See README.)
    Observable<Map<String, Object>> deleteGrantAuthorization(
            @Required @Named("username") String username,
            @Required @Named("password") String password,
            @Required @Named("id") String id
    );

    // Get a single authorization
    Observable<Map<String, Object>> getAuthorization(
            @Required @Named("username") String username,
            @Required @Named("password") String password,
            @Named("twoFactorCode") String twoFactorCode,
            @Required @Named("id") String id
    );

    // List your authorizations
    Observable<Map<String, Object>> getAllAuthorization(
            @Required @Named("username") String username,
            @Required @Named("password") String password,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get a single grant. (In preview period. See README.)
    Observable<Map<String, Object>> getGrantAuthorization(
            @Required @Named("id") String id,
            @Required @Named("username") String username,
            @Required @Named("password") String password,
            @Named("twoFactorCode") String twoFactorCode,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List your grants. (In preview period. See README.)
    Observable<Map<String, Object>> getGrantsAuthorization(
            @Required @Named("username") String username,
            @Required @Named("password") String password,
            @Named("twoFactorCode") String twoFactorCode,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get or create an authorization for a specific app
    Observable<Map<String, Object>> getOrCreateAuthorizationForApp(
            @Required @Named("username") String username,
            @Required @Named("password") String password,
            @Required @Named("clientId") String clientId,
            @Required @Named("clientSecret") String clientSecret,
            @Named("scopes") String scopes,
            @Named("note") String note,
            @Named("noteUrl") String noteUrl,
            @Named("fingerprint") String fingerprint
    );

    // Get or create an authorization for a specific app and fingerprint
    Observable<Map<String, Object>> getOrCreateAuthorizationForAppAndFingerprint(
            @Required @Named("username") String username,
            @Required @Named("password") String password,
            @Required @Named("clientId") String clientId,
            @Named("fingerprint") String fingerprint,
            @Required @Named("clientSecret") String clientSecret,
            @Named("scopes") String scopes,
            @Named("note") String note,
            @Named("noteUrl") String noteUrl
    );

    // Reset an authorization
    Observable<Map<String, Object>> resetAuthorization(
            @Required @Named("token") String token,
            @Required @Named("clientId") String clientId,
            @Required @Named("clientSecret") String clientSecret
    );

    // Revoke an authorization for an application
    Observable<Map<String, Object>> revokeAuthorization(
            @Required @Named("token") String token,
            @Required @Named("clientId") String clientId,
            @Required @Named("clientSecret") String clientSecret
    );

    // Update an existing authorization
    Observable<Map<String, Object>> updateAuthorization(
            @Required @Named("username") String username,
            @Required @Named("password") String password,
            @Required @Named("id") String id,
            @Named("scopes") String scopes,
            @Named("addScopes") String addScopes,
            @Named("removeScopes") String removeScopes,
            @Named("note") String note,
            @Named("noteUrl") String noteUrl,
            @Named("fingerprint") String fingerprint
    );

    // Create an organization
    Observable<Map<String, Object>> createOrganizationEnterprise(
            @Required @Named("login") String login,
            @Required @Named("admin") String admin,
            @Named("profileName") String profileName
    );

    // Get license information
    Observable<Map<String, Object>> getLicenseEnterprise();

    // Queue an indexing job
    Observable<Map<String, Object>> queueIndexingJobEnterprise(
            @Required @Named("target") String target
    );

    // Get statistics.
    Observable<Map<String, Object>> statsEnterprise(
            @Required @Named("type") String type
    );

    // Sync LDAP mapping for a team.
    Observable<Map<String, Object>> syncLdapForTeamEnterprise(
            @Required @Named("teamId") Number teamId
    );

    // Sync LDAP mapping for a user.
    Observable<Map<String, Object>> syncLdapForUserEnterprise(
            @Required @Named("user") String user
    );

    // Update LDAP mapping for a team.
    Observable<Map<String, Object>> updateLdapForTeamEnterprise(
            @Required @Named("teamId") Number teamId,
            @Named("data") String data
    );

    // Update LDAP mapping for a user.
    Observable<Map<String, Object>> updateLdapForUserEnterprise(
            @Required @Named("user") String user,
            @Named("data") String data
    );

    // Check if a gist is starred
    Observable<Map<String, Object>> checkGistStar(
            @Required @Named("id") String id
    );

    // Create a gist
    Observable<Map<String, Object>> createGist(
            @Required @Named("files") String files,
            @Named("description") String description,
            @Required @Named("_public") String _public
    );

    // Create a gist
    Observable<Map<String, Object>> createSingleFileGist(
            @Required @Named("fileName") String fileName,
            @Required @Named("fileContents") String fileContents,
            @Named("description") String description,
            @Required @Named("_public") String _public
    );

    // Create a comment
    Observable<Map<String, Object>> createGistComment(
            @Required @Named("gistId") String gistId,
            @Required @Named("body") String body
    );

    // Delete a gist
    Observable<Map<String, Object>> deleteGist(
            @Required @Named("id") String id
    );

    // Delete a comment
    Observable<Map<String, Object>> deleteGistComment(
            @Required @Named("gistId") String gistId,
            @Required @Named("commentId") String commentId
    );

    // Edit a gist
    Observable<Map<String, Object>> editGist(
            @Required @Named("id") String id,
            @Named("description") String description,
            @Required @Named("files") String files
    );

    // Edit a comment
    Observable<Map<String, Object>> updateGistComment(
            @Required @Named("gistId") String gistId,
            @Required @Named("commentId") String commentId,
            @Required @Named("body") String body
    );

    // Fork a gist
    Observable<Map<String, Object>> forkGist(
            @Required @Named("id") String id
    );

    // Get a single gist
    Observable<Map<String, Object>> getGist(
            @Required @Named("id") String id
    );

    // List the authenticated user's gists or if called anonymously, this will return all public gists
    Observable<Map<String, Object>> getAllGists(
            @Named("page") Number page,
            @Named("perPage") Number perPage,
            @Named("since") String since
    );

    // Get a single comment
    Observable<Map<String, Object>> getGistComment(
            @Required @Named("gistId") String gistId,
            @Required @Named("id") String id
    );

    // List comments on a gist
    Observable<Map<String, Object>> getGistComments(
            @Required @Named("gistId") String gistId
    );

    // List gist commits
    Observable<Map<String, Object>> getGistCommits(
            @Required @Named("id") String id
    );

    // List a user's gists
    Observable<Map<String, Object>> getUserGists(
            @Required @Named("user") String user,
            @Named("page") Number page,
            @Named("perPage") Number perPage,
            @Named("since") String since
    );

    // List gist forks
    Observable<Map<String, Object>> getGistForks(
            @Required @Named("id") String id,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List all public gists
    Observable<Map<String, Object>> getPublicGists(
            @Named("since") String since
    );

    // Get a specific revision of a gist
    Observable<Map<String, Object>> getGistByRevision(
            @Required @Named("id") String id,
            @Required @Named("sha") String sha
    );

    // List the authenticated user's starred gists
    Observable<Map<String, Object>> getStarredGists(
            @Named("since") String since
    );

    // Star a gist
    Observable<Map<String, Object>> starGist(
            @Required @Named("id") String id
    );

    // Unstar a gist
    Observable<Map<String, Object>> unstarGist(
            @Required @Named("id") String id
    );

    // Create a Blob
    Observable<Map<String, Object>> createBlob(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("content") String content,
            @Required @Named("encoding") String encoding
    );

    // Create a Commit
    Observable<Map<String, Object>> createCommit(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("message") String message,
            @Required @Named("tree") String tree,
            @Required @Named("parents") String parents,
            @Named("author") String author,
            @Named("committer") String committer
    );

    // Create a Reference
    Observable<Map<String, Object>> createReference(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("ref") String ref,
            @Required @Named("sha") String sha
    );

    // Create a Tag Object
    Observable<Map<String, Object>> createTag(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("tag") String tag,
            @Required @Named("message") String message,
            @Required @Named("object") String object,
            @Required @Named("type") String type,
            @Required @Named("tagger") String tagger
    );

    // Create a Tree
    Observable<Map<String, Object>> createTree(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("tree") String tree,
            @Named("baseTree") String baseTree
    );

    // Delete a Reference
    Observable<Map<String, Object>> deleteReference(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("ref") String ref
    );

    // Get a Blob
    Observable<Map<String, Object>> getBlob(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("sha") String sha,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get a Commit
    Observable<Map<String, Object>> getCommit(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("sha") String sha
    );

    // Get a Commit Signature Verification. (In preview period. See README.)
    Observable<Map<String, Object>> getCommitSignatureVerification(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("sha") String sha
    );

    // Get a Reference
    Observable<Map<String, Object>> getReference(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("ref") String ref
    );

    // Get all References
    Observable<Map<String, Object>> getReferences(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get a Tag
    Observable<Map<String, Object>> getTag(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("sha") String sha
    );

    // Get a Tag Signature Verification. (In preview period. See README.)
    Observable<Map<String, Object>> getTagSignatureVerification(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("sha") String sha
    );

    // Get all tag References
    Observable<Map<String, Object>> getTags(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get a Tree
    Observable<Map<String, Object>> getTree(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("sha") String sha,
            @Named("recursive") String recursive
    );

    // Update a Reference
    Observable<Map<String, Object>> updateReference(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("ref") String ref,
            @Required @Named("sha") String sha,
            @Named("force") String force
    );

    // Create a new access token
    Observable<Map<String, Object>> createInstallation(
            @Required @Named("installationId") Number installationId,
            @Named("userId") Number userId
    );

    // Add assignees to an issue.
    Observable<Map<String, Object>> addAssigneesToIssue(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number,
            @Required @Named("assignees") String assignees
    );

    // Add labels to an issue
    Observable<Map<String, Object>> addIssueLabels(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number,
            @Required @Named("body") String body
    );

    // Check assignee
    Observable<Map<String, Object>> checkAssignee(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("assignee") String assignee
    );

    // Create an issue
    Observable<Map<String, Object>> createIssue(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("title") String title,
            @Named("body") String body,
            @Named("assignee") String assignee,
            @Named("milestone") Number milestone,
            @Named("labels") String labels,
            @Named("assignees") String assignees
    );

    // Create a comment
    Observable<Map<String, Object>> createIssueComment(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number,
            @Required @Named("body") String body
    );

    // Create a label
    Observable<Map<String, Object>> createLabel(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("name") String name,
            @Required @Named("color") String color
    );

    // Create a milestone
    Observable<Map<String, Object>> createMilestone(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("title") String title,
            @Named("state") String state,
            @Named("description") String description,
            @Named("dueOn") String dueOn
    );

    // Delete a comment
    Observable<Map<String, Object>> deleteIssueComment(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id
    );

    // Delete a label
    Observable<Map<String, Object>> deleteLabel(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("name") String name
    );

    // Delete a milestone
    Observable<Map<String, Object>> deleteMilestone(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number
    );

    // Edit an issue
    Observable<Map<String, Object>> updateIssue(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number,
            @Named("title") String title,
            @Named("body") String body,
            @Named("state") String state,
            @Named("milestone") Number milestone,
            @Named("labels") String labels,
            @Named("assignees") String assignees
    );

    // Edit a comment
    Observable<Map<String, Object>> updateIssueComment(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id,
            @Required @Named("body") String body
    );

    // Get a single issue
    Observable<Map<String, Object>> getIssue(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number
    );

    // List all issues across all the authenticated user's visible repositories including owned repositories, member repositories, and organization repositories
    Observable<Map<String, Object>> getAllIssues(
            @Named("filter") String filter,
            @Named("state") String state,
            @Named("labels") String labels,
            @Named("sort") String sort,
            @Named("direction") String direction,
            @Named("since") String since,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List assignees
    Observable<Map<String, Object>> getAssignees(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName
    );

    // Get a single comment
    Observable<Map<String, Object>> getIssueComment(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id
    );

    // List comments on an issue
    Observable<Map<String, Object>> getIssueComments(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List comments in a repository
    Observable<Map<String, Object>> getIssuesCommentsForRepository(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("sort") String sort,
            @Named("direction") String direction,
            @Named("since") String since,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get a single event
    Observable<Map<String, Object>> getIssueEvent(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id
    );

    // List events for an issue
    Observable<Map<String, Object>> getIssueEvents(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List events for a repository
    Observable<Map<String, Object>> getIssueEventsForRepository(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List events for an issue. (In preview period. See README.)
    Observable<Map<String, Object>> getIssueEventsTimeline(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List all issues for a given organization for the authenticated user
    Observable<Map<String, Object>> getIssuesForOrganization(
            @Required @Named("organizationName") String organizationName,
            @Named("filter") String filter,
            @Named("state") String state,
            @Named("labels") String labels,
            @Named("sort") String sort,
            @Named("direction") String direction,
            @Named("since") String since,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List issues for a repository
    Observable<Map<String, Object>> getIssuesForRepository(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("milestone") String milestone,
            @Named("state") String state,
            @Named("assignee") String assignee,
            @Named("creator") String creator,
            @Named("mentioned") String mentioned,
            @Named("labels") String labels,
            @Named("sort") String sort,
            @Named("direction") String direction,
            @Named("since") String since,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List all issues across owned and member repositories for the authenticated user
    Observable<Map<String, Object>> getUserIssues(
            @Named("filter") String filter,
            @Named("state") String state,
            @Named("labels") String labels,
            @Named("sort") String sort,
            @Named("direction") String direction,
            @Named("since") String since,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List labels on an issue
    Observable<Map<String, Object>> getIssueLabels(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number
    );

    // Get a single label
    Observable<Map<String, Object>> getLabel(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("name") String name
    );

    // List all labels for this repository
    Observable<Map<String, Object>> getRepositoryLabels(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get a single milestone
    Observable<Map<String, Object>> getMilestone(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number
    );

    // Get labels for every issue in a milestone
    Observable<Map<String, Object>> getMilestoneLabels(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number
    );

    // List milestones for a repository
    Observable<Map<String, Object>> getRepositoryMilestones(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("state") String state,
            @Named("sort") String sort,
            @Named("direction") String direction,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Users with push access can lock an issue's conversation.
    Observable<Map<String, Object>> lockIssue(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number
    );

    // Remove all labels from an issue
    Observable<Map<String, Object>> removeIssueAllLabels(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number
    );

    // Remove assignees from an issue.
    Observable<Map<String, Object>> removeAssigneesFromIssue(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number,
            @Required @Named("assignees") String assignees
    );

    // Remove a label from an issue
    Observable<Map<String, Object>> removeIssueLabel(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number,
            @Required @Named("name") String name
    );

    // Replace all labels for an issue
    Observable<Map<String, Object>> replaceAllIssueLabels(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number,
            @Required @Named("body") String body
    );

    // Users with push access can unlock an issue's conversation.
    Observable<Map<String, Object>> unlockIssue(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number
    );

    // Update a label
    Observable<Map<String, Object>> updateLabel(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("oldname") String oldname,
            @Required @Named("name") String name,
            @Required @Named("color") String color
    );

    // Update a milestone
    Observable<Map<String, Object>> updateMilestone(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number,
            @Required @Named("title") String title,
            @Named("state") String state,
            @Named("description") String description,
            @Named("dueOn") String dueOn
    );

    // Cancel an import. (In preview period. See README.)
    Observable<Map<String, Object>> cancelImport(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName
    );

    // Delete a migration archive
    Observable<Map<String, Object>> deleteMigrationArchive(
            @Required @Named("organizationName") String organizationName,
            @Required @Named("id") String id
    );

    // Get import commit authors. (In preview period. See README.)
    Observable<Map<String, Object>> getImportCommitAuthors(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("since") String since
    );

    // Get import progress. (In preview period. See README.)
    Observable<Map<String, Object>> getImportProgress(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName
    );

    // List files larger than 100MB found during the import. (In preview period. See README.)
    Observable<Map<String, Object>> getLargeImportFiles(
            @Required @Named("user") String user,
            @Required @Named("name") String name
    );

    // Get the URL to a migration archive.
    Observable<Map<String, Object>> getMigrationArchiveLink(
            @Required @Named("organizationName") String organizationName,
            @Required @Named("id") String id
    );

    // Get the status of a migration
    Observable<Map<String, Object>> getMigrationStatus(
            @Required @Named("organizationName") String organizationName,
            @Required @Named("id") String id
    );

    // Get a list of migrations
    Observable<Map<String, Object>> getMigrations(
            @Required @Named("organizationName") String organizationName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Map a commit author. (In preview period. See README.)
    Observable<Map<String, Object>> mapImportCommitAuthor(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("authorId") String authorId,
            @Named("email") String email,
            @Named("name") String name
    );

    // Set import LFS preference. (In preview period. See README.)
    Observable<Map<String, Object>> setImportLfsPreference(
            @Required @Named("user") String user,
            @Required @Named("systemName") String systemName
    );

    // Start an import. (In preview period. See README.)
    Observable<Map<String, Object>> startImport(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("vcsUrl") String vcsUrl,
            @Named("vcs") String vcs,
            @Required @Named("vcsUsername") String vcsUsername,
            @Required @Named("vcsPassword") String vcsPassword,
            @Named("tfvcProject") String tfvcProject
    );

    // Start a migration.
    Observable<Map<String, Object>> startMigration(
            @Required @Named("organizationName") String organizationName,
            @Required @Named("repositories") String repositories,
            @Named("lockRepositories") String lockRepositories,
            @Named("excludeAttachments") String excludeAttachments
    );

    // Unlock a repository that was locked for migration.
    Observable<Map<String, Object>> unlockRepositoryLockedForMigration(
            @Required @Named("organizationName") String organizationName,
            @Required @Named("id") String id,
            @Required @Named("repositoryName") String repositoryName
    );

    // Update existing import. (In preview period. See README.)
    Observable<Map<String, Object>> updateImport(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("data") String data
    );

    // Lists all the emojis available to use on GitHub.
    Observable<Map<String, Object>> getEmojis();

    // Get a single gitignore template
    Observable<Map<String, Object>> getGitignoreTemplate(
            @Required @Named("name") String name
    );

    // Lists available gitignore templates
    Observable<Map<String, Object>> getGitignoreTemplates();

    // Get an individual license. (In preview period. See README.)
    Observable<Map<String, Object>> getLicense(
            @Required @Named("license") String license
    );

    // List all licenses. (In preview period. See README.)
    Observable<Map<String, Object>> getLicenses();

    // This endpoint provides information about GitHub.com, the service. Or, if you access this endpoint on your organization's GitHub Enterprise installation, this endpoint provides information about that installation.
    Observable<Map<String, Object>> getMeta();

    // Get your current rate limit status
    Observable<Map<String, Object>> getRateLimit();

    // Get the contents of a repository's license. (In preview period. See README.)
    Observable<Map<String, Object>> getRepoLicenseMisc(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName
    );

    // Render an arbitrary Markdown document
    Observable<Map<String, Object>> renderMarkdown(
            @Required @Named("text") String text,
            @Named("mode") String mode,
            @Named("context") String context
    );

    // Render a Markdown document in raw mode
    Observable<Map<String, Object>> renderMarkdownRaw(
            @Required @Named("data") String data
    );

    // Add or update organization membership
    Observable<Map<String, Object>> addOrganizationMembership(
            @Required @Named("organizationName") String organizationName,
            @Required @Named("user") String user,
            @Required @Named("role") String role
    );

    // Add team membership
    Observable<Map<String, Object>> addOrganizationTeamMembership(
            @Required @Named("id") String id,
            @Required @Named("user") String user,
            @Named("role") String role
    );

    // Add team repository
    Observable<Map<String, Object>> addOrganizationTeamRepository(
            @Required @Named("id") String id,
            @Required @Named("organizationName") String organizationName,
            @Required @Named("repositoryName") String repositoryName,
            @Named("permission") String permission
    );

    // Check membership
    Observable<Map<String, Object>> checkOrganizationMembership(
            @Required @Named("organizationName") String organizationName,
            @Required @Named("user") String user
    );

    // Check public membership
    Observable<Map<String, Object>> checkOrganizationPublicMembership(
            @Required @Named("organizationName") String organizationName,
            @Required @Named("user") String user
    );

    // Check if a team manages a repository
    Observable<Map<String, Object>> checkOrganizationTeamRepository(
            @Required @Named("id") String id,
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName
    );

    // Conceal a user's membership
    Observable<Map<String, Object>> cancelOrganizationMembership(
            @Required @Named("organizationName") String organizationName,
            @Required @Named("user") String user
    );

    // Create a hook
    Observable<Map<String, Object>> createOrganizationHook(
            @Required @Named("organizationName") String organizationName,
            @Required @Named("name") String name,
            @Required @Named("config") String config,
            @Named("events") String events,
            @Named("active") String active
    );

    // Create team
    Observable<Map<String, Object>> createOrganizationTeam(
            @Required @Named("organizationName") String organizationName,
            @Required @Named("name") String name,
            @Named("description") String description,
            @Named("repoNames") String repoNames,
            @Named("privacy") String privacy
    );

    // Delete a hook
    Observable<Map<String, Object>> deleteOrganizationHook(
            @Required @Named("organizationName") String organizationName,
            @Required @Named("id") String id
    );

    // null
    Observable<Map<String, Object>> deleteOrganizationTeam(
            @Required @Named("id") String id
    );

    // Remove team repository
    Observable<Map<String, Object>> deleteOrganizationTeamRepository(
            @Required @Named("id") String id,
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName
    );

    // Edit a hook
    Observable<Map<String, Object>> editOrganizationHook(
            @Required @Named("organizationName") String organizationName,
            @Required @Named("id") String id,
            @Required @Named("config") String config,
            @Named("events") String events,
            @Named("active") String active
    );

    // Edit team
    Observable<Map<String, Object>> editOrganizationTeam(
            @Required @Named("id") String id,
            @Required @Named("name") String name,
            @Named("description") String description,
            @Named("privacy") String privacy
    );

    // Get an organization
    Observable<Map<String, Object>> getOrganization(
            @Required @Named("organizationName") String organizationName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List all organizations
    Observable<Map<String, Object>> getAllOrganizations(
            @Named("since") String since,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List organizations for the authenticated user.
    Observable<Map<String, Object>> getUserOrganizations(
            @Required @Named("user") String user,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get single hook
    Observable<Map<String, Object>> getOrganizationHook(
            @Required @Named("organizationName") String organizationName,
            @Required @Named("id") String id
    );

    // List hooks
    Observable<Map<String, Object>> getOrganizationHooks(
            @Required @Named("organizationName") String organizationName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Members list
    Observable<Map<String, Object>> getOrganizationMembers(
            @Required @Named("organizationName") String organizationName,
            @Named("filter") String filter,
            @Named("role") String role,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get organization membership
    Observable<Map<String, Object>> getOrganizationMembership(
            @Required @Named("organizationName") String organizationName,
            @Required @Named("user") String user
    );

    // List your organization memberships
    Observable<Map<String, Object>> getOrganizationMemberships(
            @Named("state") String state
    );

    // Public members list
    Observable<Map<String, Object>> getOrganizationPublicMembers(
            @Required @Named("organizationName") String organizationName
    );

    // Get team
    Observable<Map<String, Object>> getOrganizationTeam(
            @Required @Named("id") String id
    );

    // null
    Observable<Map<String, Object>> getOrganizationTeamMembers(
            @Required @Named("id") String id,
            @Named("role") String role,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get team membership
    Observable<Map<String, Object>> getOrganizationTeamMembership(
            @Required @Named("id") String id,
            @Required @Named("user") String user
    );

    // Get team repos
    Observable<Map<String, Object>> getOrganizationTeamRepositories(
            @Required @Named("id") String id,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List teams
    Observable<Map<String, Object>> getOrganizationTeams(
            @Required @Named("organizationName") String organizationName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Ping a hook
    Observable<Map<String, Object>> pingOrganizationHook(
            @Required @Named("organizationName") String organizationName,
            @Required @Named("id") String id
    );

    // Publicize a user's membership
    Observable<Map<String, Object>> publicizeOrganizationMembership(
            @Required @Named("organizationName") String organizationName,
            @Required @Named("user") String user
    );

    // Remove a member
    Observable<Map<String, Object>> removeOrganizationMember(
            @Required @Named("organizationName") String organizationName,
            @Required @Named("user") String user
    );

    // Remove organization membership
    Observable<Map<String, Object>> removeOrganizationMembership(
            @Required @Named("organizationName") String organizationName,
            @Required @Named("user") String user
    );

    // Remove team membership
    Observable<Map<String, Object>> removeOrganizationTeamMembership(
            @Required @Named("id") String id,
            @Required @Named("user") String user
    );

    // Edit an organization
    Observable<Map<String, Object>> updateOrganization(
            @Required @Named("organizationName") String organizationName,
            @Named("billingEmail") String billingEmail,
            @Named("company") String company,
            @Named("email") String email,
            @Named("location") String location,
            @Named("name") String name,
            @Named("description") String description
    );

    // Get if a pull request has been merged
    Observable<Map<String, Object>> checkMergedPullRequest(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Create a pull request
    Observable<Map<String, Object>> createPullRequest(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("title") String title,
            @Required @Named("head") String head,
            @Required @Named("base") String base,
            @Named("body") String body
    );

    // Create a comment
    Observable<Map<String, Object>> createPullRequestComment(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number,
            @Required @Named("body") String body,
            @Required @Named("commitId") String commitId,
            @Required @Named("path") String path,
            @Required @Named("position") Number position
    );

    // Reply to existing pull request comment
    Observable<Map<String, Object>> createPullRequestCommentReply(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number,
            @Required @Named("body") String body,
            @Required @Named("inReplyTo") Number inReplyTo
    );

    // Create a pull request from an existing issue
    Observable<Map<String, Object>> createPullRequestFromIssue(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("issue") Number issue,
            @Required @Named("head") String head,
            @Required @Named("base") String base
    );

    // Delete a comment
    Observable<Map<String, Object>> deletePullRequestComment(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number
    );

    // Edit a comment
    Observable<Map<String, Object>> editPullRequestComment(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number,
            @Required @Named("body") String body
    );

    // Get a single pull request
    Observable<Map<String, Object>> getPullRequest(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number
    );

    // List pull requests
    Observable<Map<String, Object>> getAllPullRequests(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("state") String state,
            @Named("head") String head,
            @Named("base") String base,
            @Named("sort") String sort,
            @Named("direction") String direction,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get a single comment
    Observable<Map<String, Object>> getPullRequestComment(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number
    );

    // List comments on a pull request
    Observable<Map<String, Object>> getPullRequestComments(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List comments in a repository
    Observable<Map<String, Object>> getPullRequestCommentsForRepository(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("sort") String sort,
            @Named("direction") String direction,
            @Named("since") String since,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List commits on a pull request
    Observable<Map<String, Object>> getPullRequestCommits(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List pull requests files
    Observable<Map<String, Object>> getPullRequestFiles(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Merge a pull request (Merge Button)
    Observable<Map<String, Object>> mergePullRequest(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number,
            @Named("commitTitle") String commitTitle,
            @Named("commitMessage") String commitMessage,
            @Named("sha") String sha,
            @Named("mergeMethod") String mergeMethod
    );

    // Update a pull request
    Observable<Map<String, Object>> updatePullRequest(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number,
            @Named("title") String title,
            @Named("body") String body,
            @Named("state") String state,
            @Named("base") String base
    );

    // Create reaction for a commit comment. (In preview period. See README.)
    Observable<Map<String, Object>> createReactionForCommitComment(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id,
            @Required @Named("content") String content
    );

    // Create reaction for an issue. (In preview period. See README.)
    Observable<Map<String, Object>> createReactionForIssue(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number,
            @Required @Named("content") String content
    );

    // Create reaction for an issue comment. (In preview period. See README.)
    Observable<Map<String, Object>> createReactionForIssueComment(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id,
            @Required @Named("content") String content
    );

    // Create reaction for a pull request review comment. (In preview period. See README.)
    Observable<Map<String, Object>> createReactionForPullRequestReviewComment(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id,
            @Required @Named("content") String content
    );

    // Delete a reaction. (In preview period. See README.)
    Observable<Map<String, Object>> deleteReaction(
            @Required @Named("id") String id
    );

    // List reactions for a commit comment. (In preview period. See README.)
    Observable<Map<String, Object>> getReactionForCommitComment(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id,
            @Named("content") String content
    );

    // List reactions for an issue. (In preview period. See README.)
    Observable<Map<String, Object>> getReactionForIssue(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number,
            @Named("content") String content
    );

    // List reactions for an issue comment. (In preview period. See README.)
    Observable<Map<String, Object>> getReactionForIssueComment(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id,
            @Named("content") String content
    );

    // List reactions for a pull request review comment. (In preview period. See README.)
    Observable<Map<String, Object>> getReactionForPullRequestReviewComment(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id,
            @Named("content") String content
    );

    // Add user as a collaborator
    Observable<Map<String, Object>> addRepositoryCollaborator(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("collabuser") String collabuser,
            @Named("permission") String permission
    );

    // Add required status checks contexts of protected branch. (In preview period. See README.)
    Observable<Map<String, Object>> addProtectedBranchRequiredStatusChecksContexts(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("branch") String branch,
            @Required @Named("body") String body,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Add team restrictions of protected branch. (In preview period. See README.)
    Observable<Map<String, Object>> addProtectedBranchTeamRestrictions(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("branch") String branch,
            @Required @Named("body") String body,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Add user restrictions of protected branch. (In preview period. See README.)
    Observable<Map<String, Object>> addProtectedBranchUserRestrictions(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("branch") String branch,
            @Required @Named("body") String body,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Check if user is a collaborator.
    Observable<Map<String, Object>> checkRepositoryCollaborator(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("collabuser") String collabuser
    );

    // Compare two commits.
    Observable<Map<String, Object>> compareRepositoryCommits(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("base") String base,
            @Required @Named("head") String head
    );

    // Create a new repository for the authenticated user.
    Observable<Map<String, Object>> createRepository(
            @Required @Named("name") String name,
            @Named("description") String description,
            @Named("homepage") String homepage,
            @Named("_private") String _private,
            @Named("hasIssues") String hasIssues,
            @Named("hasWiki") String hasWiki,
            @Named("hasDownloads") String hasDownloads,
            @Named("teamId") String teamId,
            @Named("autoInit") String autoInit,
            @Named("gitignoreTemplate") String gitignoreTemplate,
            @Named("licenseTemplate") String licenseTemplate,
            @Named("allowSquashMerge") String allowSquashMerge,
            @Named("allowMergeCommit") String allowMergeCommit,
            @Named("allowRebaseMerge") String allowRebaseMerge
    );

    // Create a commit comment.
    Observable<Map<String, Object>> createRepositoryCommitComment(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("sha") String sha,
            @Required @Named("body") String body,
            @Named("path") String path,
            @Named("position") Number position
    );

    // Create a deployment.
    Observable<Map<String, Object>> createRepositoryDeployment(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("ref") String ref,
            @Named("task") String task,
            @Named("autoMerge") String autoMerge,
            @Named("requiredContexts") String requiredContexts,
            @Named("payload") String payload,
            @Named("environment") String environment,
            @Named("description") String description,
            @Named("transientEnvironment") String transientEnvironment,
            @Named("productionEnvironment") String productionEnvironment
    );

    // Create a deployment status.
    Observable<Map<String, Object>> createRepositoryDeploymentStatus(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id,
            @Named("state") String state,
            @Named("targetUrl") String targetUrl,
            @Named("logUrl") String logUrl,
            @Named("description") String description,
            @Named("environmentUrl") String environmentUrl,
            @Named("autoInactive") String autoInactive
    );

    // Create a new file in the given repository.
    Observable<Map<String, Object>> createRepositoryFile(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("path") String path,
            @Required @Named("message") String message,
            @Required @Named("content") String content,
            @Named("branch") String branch,
            @Named("committer") String committer
    );

    // Create a new repository for an organization.
    Observable<Map<String, Object>> createRepositoryForOrganization(
            @Required @Named("organizationName") String organizationName,
            @Required @Named("name") String name,
            @Named("description") String description,
            @Named("homepage") String homepage,
            @Named("_private") String _private,
            @Named("hasIssues") String hasIssues,
            @Named("hasWiki") String hasWiki,
            @Named("hasDownloads") String hasDownloads,
            @Named("teamId") Number teamId,
            @Named("autoInit") String autoInit,
            @Named("gitignoreTemplate") String gitignoreTemplate,
            @Named("licenseTemplate") String licenseTemplate,
            @Named("allowSquashMerge") String allowSquashMerge,
            @Named("allowMergeCommit") String allowMergeCommit,
            @Named("allowRebaseMerge") String allowRebaseMerge
    );

    // Create a hook.
    Observable<Map<String, Object>> createRepositoryHook(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("name") String name,
            @Required @Named("config") String config,
            @Named("events") String events,
            @Named("active") String active
    );

    // Add a new deploy key.
    Observable<Map<String, Object>> createRepositoryKey(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("title") String title,
            @Required @Named("key") String key,
            @Named("readOnly") String readOnly
    );

    // Create a project.
    Observable<Map<String, Object>> createRepositoryProject(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("name") String name,
            @Required @Named("body") String body
    );

    // Create a project card.
    Observable<Map<String, Object>> createRepositoryProjectCard(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id,
            @Named("note") String note,
            @Named("contentId") String contentId,
            @Named("contentType") String contentType
    );

    // Create a project column.
    Observable<Map<String, Object>> createRepositoryProjectColumn(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number,
            @Required @Named("name") String name
    );

    // Create a release.
    Observable<Map<String, Object>> createRepositoryRelease(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("tagName") String tagName,
            @Named("targetCommitish") String targetCommitish,
            @Named("name") String name,
            @Named("body") String body,
            @Named("draft") String draft,
            @Named("prerelease") String prerelease
    );

    // Create a status.
    Observable<Map<String, Object>> createRepositoryStatus(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("sha") String sha,
            @Required @Named("state") String state,
            @Named("targetUrl") String targetUrl,
            @Named("description") String description,
            @Named("context") String context
    );

    // Delete a repository.
    Observable<Map<String, Object>> deleteRepository(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName
    );

    // Delete a release asset.
    Observable<Map<String, Object>> deleteRepositoryAsset(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id
    );

    // Delete a commit comment.
    Observable<Map<String, Object>> deleteRepositoryCommitComment(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id
    );

    // Delete a download.
    Observable<Map<String, Object>> deleteRepositoryDownload(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id
    );

    // Delete a file.
    Observable<Map<String, Object>> deleteRepositoryFile(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("path") String path,
            @Required @Named("message") String message,
            @Required @Named("sha") String sha,
            @Named("branch") String branch,
            @Named("committer") String committer
    );

    // Deleate a hook.
    Observable<Map<String, Object>> deleteRepositoryHook(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id
    );

    // Delete a repository invitation. (In preview period. See README.)
    Observable<Map<String, Object>> deleteRepositoryInvite(
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id
    );

    // Remove a deploy key.
    Observable<Map<String, Object>> deleteRepositoryKey(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id
    );

    // Delete a project.
    Observable<Map<String, Object>> deleteRepositoryProject(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number
    );

    // Delete a project card.
    Observable<Map<String, Object>> deleteRepositoryProjectCard(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id
    );

    // Delete a project column.
    Observable<Map<String, Object>> deleteRepositoryProjectColumn(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id
    );

    // Delete a release
    Observable<Map<String, Object>> deleteRepositoryRelease(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id
    );

    // Update a repo.
    Observable<Map<String, Object>> editRepository(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("name") String name,
            @Named("description") String description,
            @Named("homepage") String homepage,
            @Named("_private") String _private,
            @Named("hasIssues") String hasIssues,
            @Named("hasWiki") String hasWiki,
            @Named("hasDownloads") String hasDownloads,
            @Named("defaultBranch") String defaultBranch,
            @Named("allowSquashMerge") String allowSquashMerge,
            @Named("allowMergeCommit") String allowMergeCommit,
            @Named("allowRebaseMerge") String allowRebaseMerge
    );

    // Edit a release asset.
    Observable<Map<String, Object>> editRepositoryAsset(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id,
            @Required @Named("name") String name,
            @Named("label") String label
    );

    // Edit a hook.
    Observable<Map<String, Object>> editRepositoryHook(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id,
            @Required @Named("config") String config,
            @Named("events") String events,
            @Named("addEvents") String addEvents,
            @Named("removeEvents") String removeEvents,
            @Named("active") String active
    );

    // Edit a release.
    Observable<Map<String, Object>> editRepositoryRelease(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id,
            @Required @Named("tagName") String tagName,
            @Named("targetCommitish") String targetCommitish,
            @Named("name") String name,
            @Named("body") String body,
            @Named("draft") String draft,
            @Named("prerelease") String prerelease
    );

    // Create a fork.
    Observable<Map<String, Object>> forkRepository(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("organization") String organization
    );

    // Get a repo for a user.
    Observable<Map<String, Object>> getRepository(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName
    );

    // List your repositories
    Observable<Map<String, Object>> getAllRepositories(
            @Named("visibility") String visibility,
            @Named("affiliation") String affiliation,
            @Named("type") String type,
            @Named("sort") String sort,
            @Named("direction") String direction,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List commit comments for a repository.
    Observable<Map<String, Object>> getRepositoryAllCommitComments(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get archive link.
    Observable<Map<String, Object>> getRepositoryArchiveLink(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("archiveFormat") String archiveFormat,
            @Named("ref") String ref
    );

    // Get a single release asset.
    Observable<Map<String, Object>> getRepositoryAsset(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id
    );

    // Get branch. (In preview period. See README.)
    Observable<Map<String, Object>> getRepositoryBranch(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("branch") String branch,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get branch protection. (In preview period. See README.)
    Observable<Map<String, Object>> getRepositoryBranchProtection(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("branch") String branch,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List branches. (In preview period. See README.)
    Observable<Map<String, Object>> getRepositoryBranches(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("_protected") String _protected,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get a single repo by id.
    Observable<Map<String, Object>> getRepositoryById(
            @Required @Named("id") String id
    );

    // Get the total number of clones and breakdown per day or week for the last 14 days.
    Observable<Map<String, Object>> getRepositoryClones(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List collaborators
    Observable<Map<String, Object>> getRepositoryCollaborators(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get the combined status for a specific ref.
    Observable<Map<String, Object>> getRepositoryCombinedStatus(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("sha") String sha,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get a single commit.
    Observable<Map<String, Object>> getRepositoryCommit(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("sha") String sha
    );

    // Get a single commit comment.
    Observable<Map<String, Object>> getRepositoryCommitComment(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id
    );

    // List comments for a single commit.
    Observable<Map<String, Object>> getRepositoryCommitComments(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("sha") String sha,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List commits on a repository.
    Observable<Map<String, Object>> getRepositoryCommits(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("sha") String sha,
            @Named("path") String path,
            @Named("author") String author,
            @Named("since") String since,
            @Named("until") String until,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get the contents of a file or directory in a repository.
    Observable<Map<String, Object>> getRepositoryContent(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("path") String path,
            @Named("ref") String ref
    );

    // Get contributors for the specified repository.
    Observable<Map<String, Object>> getRepositoryContributors(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("anon") String anon,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List deployment statuses.
    Observable<Map<String, Object>> getRepositoryDeploymentStatuses(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id
    );

    // List deployments.
    Observable<Map<String, Object>> getRepositoryDeployments(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("sha") String sha,
            @Named("ref") String ref,
            @Named("task") String task,
            @Named("environment") String environment,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get a single download.
    Observable<Map<String, Object>> getRepositoryDownload(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id
    );

    // List downloads for repository.
    Observable<Map<String, Object>> getRepositoryDownloads(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List repositories for the specified org.
    Observable<Map<String, Object>> getOrganizationRepositories(
            @Required @Named("organizationName") String organizationName,
            @Named("type") String type,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List public repositories for the specified user.
    Observable<Map<String, Object>> getUserRepositories(
            @Required @Named("user") String user,
            @Named("type") String type,
            @Named("sort") String sort,
            @Named("direction") String direction,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List forks.
    Observable<Map<String, Object>> getRepositoryForks(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("sort") String sort,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get single hook.
    Observable<Map<String, Object>> getRepositoryHook(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id
    );

    // List hooks.
    Observable<Map<String, Object>> getRepositoryHooks(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List a user's repository invitations. (In preview period. See README.)
    Observable<Map<String, Object>> getRepositoryInvites(
            @Required @Named("repositoryName") String repositoryName
    );

    // Get a deploy key.
    Observable<Map<String, Object>> getRepositoryKey(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id
    );

    // List deploy keys.
    Observable<Map<String, Object>> getRepositoryKeys(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get languages for the specified repository.
    Observable<Map<String, Object>> getRepositoryLanguages(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get latest Pages build
    Observable<Map<String, Object>> getRepositoryLatestPagesBuild(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName
    );

    // Get the latest release.
    Observable<Map<String, Object>> getRepositoryLatestRelease(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName
    );

    // Get information about a Pages site. (Use preview header to include additional info.)
    Observable<Map<String, Object>> getRepositoryPages(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get a specific Pages build
    Observable<Map<String, Object>> getRepositoryPagesBuild(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id
    );

    // List Pages builds
    Observable<Map<String, Object>> getRepositoryPagesBuilds(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get the top 10 popular contents over the last 14 days.
    Observable<Map<String, Object>> getRepositoryPaths(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List a project.
    Observable<Map<String, Object>> getRepositoryProject(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number
    );

    // Get project card.
    Observable<Map<String, Object>> getRepositoryProjectCard(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id
    );

    // List project cards.
    Observable<Map<String, Object>> getRepositoryProjectCards(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id
    );

    // Get a project column.
    Observable<Map<String, Object>> getRepositoryProjectColumn(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id
    );

    // List a project's columns.
    Observable<Map<String, Object>> getRepositoryProjectColumns(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number
    );

    // List projects.
    Observable<Map<String, Object>> getRepositoryProjects(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName
    );

    // Get required status checks of protected branch. (In preview period. See README.)
    Observable<Map<String, Object>> getProtectedBranchRequiredStatusChecks(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("branch") String branch,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List required status checks contexts of protected branch. (In preview period. See README.)
    Observable<Map<String, Object>> getProtectedBranchRequiredStatusChecksContexts(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("branch") String branch,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get restrictions of protected branch. (In preview period. See README.)
    Observable<Map<String, Object>> getProtectedBranchRestrictions(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("branch") String branch,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List team restrictions of protected branch. (In preview period. See README.)
    Observable<Map<String, Object>> getProtectedBranchTeamRestrictions(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("branch") String branch,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List user restrictions of protected branch. (In preview period. See README.)
    Observable<Map<String, Object>> getProtectedBranchUserRestrictions(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("branch") String branch,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List all public repositories
    Observable<Map<String, Object>> getPublicRepositories(
            @Named("since") String since
    );

    // Get the README for the given repository.
    Observable<Map<String, Object>> getRepositoryReadme(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("ref") String ref
    );

    // Get the top 10 referrers over the last 14 days.
    Observable<Map<String, Object>> getRepositoryReferrers(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get a single release.
    Observable<Map<String, Object>> getRepositoryRelease(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id
    );

    // Get a release by tag name.
    Observable<Map<String, Object>> getRepositoryReleaseByTag(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("tag") String tag
    );

    // List releases for a repository.
    Observable<Map<String, Object>> getRepositoryReleases(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get the SHA-1 of a commit reference.
    Observable<Map<String, Object>> getRepositoryShaOfCommitRef(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("ref") String ref
    );

    // Get the number of additions and deletions per week.
    Observable<Map<String, Object>> getRepositoryStatsCodeFrequency(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName
    );

    // Get the last year of commit activity data.
    Observable<Map<String, Object>> getRepositoryStatsCommitActivity(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName
    );

    // Get contributors list with additions, deletions, and commit counts.
    Observable<Map<String, Object>> getRepositoryStatsContributors(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName
    );

    // Get the weekly commit count for the repository owner and everyone else.
    Observable<Map<String, Object>> getRepositoryStatsParticipation(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName
    );

    // Get the number of commits per hour in each day.
    Observable<Map<String, Object>> getRepositoryStatsPunchCard(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName
    );

    // Get status for a specfic ref.
    Observable<Map<String, Object>> getRepositoryStatuses(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("sha") String sha,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get tags for the specified repository.
    Observable<Map<String, Object>> getRepositoryTags(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get teams for the specified repository.
    Observable<Map<String, Object>> getRepositoryTeams(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get the total number of views and breakdown per day or week for the last 14 days.
    Observable<Map<String, Object>> getRepositoryViews(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List assets for a release.
    Observable<Map<String, Object>> getRepositoryAssets(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id
    );

    // Perform a merge.
    Observable<Map<String, Object>> mergeRepository(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("base") String base,
            @Required @Named("head") String head,
            @Named("commitMessage") String commitMessage
    );

    // Move a project card.
    Observable<Map<String, Object>> moveRepositoryProjectCard(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id,
            @Required @Named("position") String position,
            @Named("columnId") String columnId
    );

    // Move a project column.
    Observable<Map<String, Object>> moveRepositoryProjectColumn(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id,
            @Required @Named("position") String position
    );

    // Ping a hook.
    Observable<Map<String, Object>> pingRepositoryHook(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id
    );

    // Remove branch protection. (In preview period. See README.)
    Observable<Map<String, Object>> removeBranchProtection(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("branch") String branch,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Remove user as a collaborator.
    Observable<Map<String, Object>> removeRepositoryCollaborator(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("collabuser") String collabuser
    );

    // Remove required status checks of protected branch. (In preview period. See README.)
    Observable<Map<String, Object>> removeProtectedBranchRequiredStatusChecks(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("branch") String branch,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Remove required status checks contexts of protected branch. (In preview period. See README.)
    Observable<Map<String, Object>> removeProtectedBranchRequiredStatusChecksContexts(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("branch") String branch,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Remove restrictions of protected branch. (In preview period. See README.)
    Observable<Map<String, Object>> removeProtectedBranchRestrictions(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("branch") String branch,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Remove team restrictions of protected branch. (In preview period. See README.)
    Observable<Map<String, Object>> removeProtectedBranchTeamRestrictions(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("branch") String branch,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Remove user restrictions of protected branch. (In preview period. See README.)
    Observable<Map<String, Object>> removeProtectedBranchUserRestrictions(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("branch") String branch,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Replace required status checks contexts of protected branch. (In preview period. See README.)
    Observable<Map<String, Object>> replaceProtectedBranchRequiredStatusChecksContexts(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("branch") String branch,
            @Required @Named("body") String body,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Replace team restrictions of protected branch. (In preview period. See README.)
    Observable<Map<String, Object>> replaceProtectedBranchTeamRestrictions(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("branch") String branch,
            @Required @Named("body") String body,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Replace user restrictions of protected branch. (In preview period. See README.)
    Observable<Map<String, Object>> replaceProtectedBranchUserRestrictions(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("branch") String branch,
            @Required @Named("body") String body,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Request a page build. (In preview period. See README.)
    Observable<Map<String, Object>> requestRepositoryPageBuild(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName
    );

    // Test a [push] hook.
    Observable<Map<String, Object>> testRepositoryHook(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id
    );

    // Update branch protection. (In preview period. See README.)
    Observable<Map<String, Object>> updateRepositoryBranchProtection(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("branch") String branch,
            @Required @Named("requiredStatusChecks") String requiredStatusChecks,
            @Required @Named("restrictions") String restrictions,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Update a commit comment.
    Observable<Map<String, Object>> updateRepositoryCommitComment(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id,
            @Required @Named("body") String body
    );

    // Update a file.
    Observable<Map<String, Object>> updateRepositoryFile(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("path") String path,
            @Required @Named("message") String message,
            @Required @Named("content") String content,
            @Required @Named("sha") String sha,
            @Named("branch") String branch,
            @Named("committer") String committer
    );

    // Update a repository invitation. (In preview period. See README.)
    Observable<Map<String, Object>> updateRepositoryInvite(
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id,
            @Named("permission") String permission
    );

    // Update a project.
    Observable<Map<String, Object>> updateRepositoryProject(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("number") Number number,
            @Required @Named("name") String name,
            @Required @Named("body") String body
    );

    // Update a project card.
    Observable<Map<String, Object>> updateRepositoryProjectCard(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id,
            @Named("note") String note
    );

    // Update a project column.
    Observable<Map<String, Object>> updateRepositoryProjectColumn(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id,
            @Required @Named("name") String name
    );

    // Update required status checks of protected branch. (In preview period. See README.)
    Observable<Map<String, Object>> updateProtectedBranchRequiredStatusChecks(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("branch") String branch,
            @Required @Named("body") String body,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Upload a release asset.
    Observable<Map<String, Object>> uploadRepositoryAsset(
            @Required @Named("user") String user,
            @Required @Named("repositoryName") String repositoryName,
            @Required @Named("id") String id,
            @Required @Named("filepath") String filepath,
            @Required @Named("name") String name,
            @Named("label") String label
    );

    // Search code.
    Observable<Map<String, Object>> codeSearch(
            @Required @Named("q") String q,
            @Named("sort") String sort,
            @Named("order") String order,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Search against public email addresses.
    Observable<Map<String, Object>> emailSearch(
            @Required @Named("email") String email
    );

    // Search issues.
    Observable<Map<String, Object>> issuesSearch(
            @Required @Named("q") String q,
            @Named("sort") String sort,
            @Named("order") String order,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Search repositories.
    Observable<Map<String, Object>> repositorySearch(
            @Required @Named("q") String q,
            @Named("sort") String sort,
            @Named("order") String order,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Search users.
    Observable<Map<String, Object>> usersSearch(
            @Required @Named("q") String q,
            @Named("sort") String sort,
            @Named("order") String order,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Accept a repository invitation. (In preview period. See README.)
    Observable<Map<String, Object>> acceptRepositoryInvite(
            @Required @Named("id") String id
    );

    // Add email address(es)
    Observable<Map<String, Object>> addEmails(
            @Required @Named("body") String body
    );

    // Check if you are following a user
    Observable<Map<String, Object>> checkFollowing(
            @Required @Named("user") String user
    );

    // Check if one user follows another
    Observable<Map<String, Object>> checkIfOneFollowersOther(
            @Required @Named("user") String user,
            @Required @Named("otherUser") String otherUser
    );

    // Create a GPG key. (In preview period. See README.)
    Observable<Map<String, Object>> createGpgKey(
            @Required @Named("armoredPublicKey") String armoredPublicKey
    );

    // Create a public key
    Observable<Map<String, Object>> createKey(
            @Required @Named("title") String title,
            @Required @Named("key") String key
    );

    // Decline a repository invitation. (In preview period. See README.)
    Observable<Map<String, Object>> declineRepositoryInvite(
            @Required @Named("id") String id
    );

    // Delete email address(es)
    Observable<Map<String, Object>> deleteEmails(
            @Required @Named("body") String body
    );

    // Delete a GPG key. (In preview period. See README.)
    Observable<Map<String, Object>> deleteGpgKey(
            @Required @Named("id") String id
    );

    // Delete a public key
    Observable<Map<String, Object>> deleteKey(
            @Required @Named("id") String id
    );

    // Demote a site administrator to an ordinary user
    Observable<Map<String, Object>> demoteUser(
            @Required @Named("user") String user
    );

    // Edit your organization membership
    Observable<Map<String, Object>> editOrganizationMembership(
            @Required @Named("organizationName") String organizationName,
            @Required @Named("state") String state
    );

    // Follow a user
    Observable<Map<String, Object>> followUser(
            @Required @Named("user") String user
    );

    // Get the authenticated user
    Observable<Map<String, Object>> getUser();

    // Get all users
    Observable<Map<String, Object>> getAllUsers(
            @Named("since") Number since
    );

    // Get a single user by GitHub ID
    Observable<Map<String, Object>> getUserById(
            @Required @Named("id") String id
    );

    // List email addresses for a user
    Observable<Map<String, Object>> getUserEmails(
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List the authenticated user's followers
    Observable<Map<String, Object>> getUserFollowers(
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List a user's followers
    Observable<Map<String, Object>> getFollowersForUser(
            @Required @Named("user") String user,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List who the authenticated user is following
    Observable<Map<String, Object>> getUserFollowing(
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List who a user is following
    Observable<Map<String, Object>> getFollowingForUser(
            @Required @Named("user") String user,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get a single user
    Observable<Map<String, Object>> getSingleUser(
            @Required @Named("user") String user
    );

    // Get a single GPG key. (In preview period. See README.)
    Observable<Map<String, Object>> getGpgKey(
            @Required @Named("id") String id
    );

    // List your GPG keys. (In preview period. See README.)
    Observable<Map<String, Object>> getGpgKeys(
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get a single public key
    Observable<Map<String, Object>> getKey(
            @Required @Named("id") String id
    );

    // List your public keys
    Observable<Map<String, Object>> getKeys(
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List public keys for a user
    Observable<Map<String, Object>> getKeysForUser(
            @Required @Named("user") String user,
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Get your organization membership
    Observable<Map<String, Object>> getUserOrganizationMembership(
            @Required @Named("organizationName") String organizationName
    );

    // List organizations for the authenticated user.
    Observable<Map<String, Object>> getUserOrganizations(
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // List a user's repository invitations. (In preview period. See README.)
    Observable<Map<String, Object>> getRepositoryInvites();

    // Get your teams
    Observable<Map<String, Object>> getUserTeams(
            @Named("page") Number page,
            @Named("perPage") Number perPage
    );

    // Promote an ordinary user to a site administrator
    Observable<Map<String, Object>> promoteUser(
            @Required @Named("user") String user
    );

    // Suspend a user
    Observable<Map<String, Object>> suspendUser(
            @Required @Named("user") String user
    );

    // null
    Observable<Map<String, Object>> unfollowUserUser(
            @Required @Named("user") String user
    );

    // Unsuspend a user
    Observable<Map<String, Object>> unsuspendUser(
            @Required @Named("user") String user
    );

    // Update the authenticated user
    Observable<Map<String, Object>> updateUser(
            @Named("name") String name,
            @Named("email") String email,
            @Named("blog") String blog,
            @Named("company") String company,
            @Named("location") String location,
            @Named("hireable") String hireable,
            @Named("bio") String bio
    );
}