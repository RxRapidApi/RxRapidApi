package com.gatebuzz.rapidapi.rx.generator;

import com.gatebuzz.rapidapi.rx.generator.model.Argument;
import com.gatebuzz.rapidapi.rx.generator.model.Block;
import com.gatebuzz.rapidapi.rx.generator.model.ServiceDefinition;
import com.google.gson.Gson;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

import java.io.IOException;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

/**
 * Code generator for RxRapidApi
 * <p>
 * Pass a command-line argument of the URL of a RapidApi "metadata.json" file
 * and the tool will output the corresponding interface definition. These meta data
 * files are typically located in RapidApi repos as "src/metadata/metadata.json".
 */
public class RxRapidApiCodeGenerator {
    public static final Set<String> reservedNames = new HashSet<String>() {{
        add("public");
        add("protected");
        add("private");
        add("class");
        add("interface");
        add("default");
    }};

    public static void main(String[] args) throws IOException {
        OkHttpClient client = new OkHttpClient();
        Response response = client.newCall(new Request.Builder().url(args[0]).build()).execute();
        if (response.code() == 200) {
            Gson gson = new Gson();
            ServiceDefinition def = gson.fromJson(response.body().charStream(), ServiceDefinition.class);

            StringBuilder sb = new StringBuilder();
            sb.append("import com.gatebuzz.rapidapi.rx.ApiPackage;\n");
            sb.append("import com.gatebuzz.rapidapi.rx.DefaultParameters;\n");
            sb.append("import com.gatebuzz.rapidapi.rx.Named;\n");
            sb.append("import com.gatebuzz.rapidapi.rx.Required;\n");
            sb.append("import rx.Observable;\n\n");
            sb.append("import java.io.*;\n");
            sb.append("import java.util.*;\n\n");
            sb.append("/*\n");
            sb.append(" * ").append(def.getPackageName()).append("\n");
            sb.append(" *   - ").append(def.getTagline()).append("\n");
            sb.append(" *   - ").append(def.getDescription()).append("\n");
            sb.append(" *   - See: ").append(def.getRepo()).append("\n");
            sb.append(" *\n");
            sb.append(" * Generated by ").append(RxRapidApiCodeGenerator.class.getName()).append("\n");
            sb.append(" * Generated on ").append(new Date().toString()).append("\n");
            sb.append(" */\n");
            sb.append("@ApiPackage(\"").append(def.getPackageName()).append("\")\n");
            Set<String> defaults = new HashSet<>();
            if (!def.getAccounts().getCredentials().isEmpty()) {
                StringBuilder c = new StringBuilder();
                for (String cred : def.getAccounts().getCredentials()) {
                    if (c.length() > 0) {
                        c.append(", ");
                    }
                    c.append("\"").append(cred).append("\"");
                    defaults.add(cred);
                }
                sb.append("@DefaultParameters(").append(c.toString()).append(")\n");
            }

            sb.append("public interface ").append(def.getPackageName()).append(" {\n");
            if (!def.getBlocks().isEmpty()) {
                StringBuilder b = new StringBuilder();
                for (Block block : def.getBlocks()) {
                    if (b.length() > 0) {
                        b.append("\n");
                    }
                    StringBuilder a = new StringBuilder();
                    for (Argument arg : block.getArguments()) {
                        if (!defaults.contains(getSanitizedName(arg))) {
                            if (a.length() > 0) {
                                a.append(",\n");
                            }
                            a.append("        ");
                            if (Boolean.TRUE.equals(arg.getRequired())) {
                                a.append("@Required ");
                            }
                            a.append("@Named(\"").append(getSanitizedName(arg)).append("\") ");
                            a.append(getSanitizedType(arg)).append(" ").append(getSanitizedName(arg));
                        }
                    }
                    b.append("    // ").append(block.getDescription()).append("\n");
                    b.append("    Observable<Map<String, Object>> ").append(block.getName());
                    if (a.length() == 0) {
                        b.append("();\n");
                    } else {
                        b.append("(\n").append(a.toString()).append("\n    );\n");
                    }
                }
                sb.append(b.toString());
            }
            sb.append("}\n");

            System.out.println(sb.toString());
        } else {
            System.out.println("Call failed.");
        }
    }

    private static String getSanitizedName(Argument arg) {
        String name = arg.getName();
        if (reservedNames.contains(name)) {
            return "_" + name;
        }
        return name;
    }

    private static String getSanitizedType(Argument arg) {
        String type = arg.getType();
        if ("Array".equalsIgnoreCase(type) || "JSON".equalsIgnoreCase(type)) {
            return "String";
        }
        return type;
    }
}
